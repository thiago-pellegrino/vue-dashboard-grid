{
	"version": 3,
	"sources": [
		"is.ts"
	],
	"names": [
		"isWindow",
		"win",
		"window",
		"thing",
		"docFrag",
		"object",
		"nodeType",
		"func",
		"number",
		"bool",
		"string",
		"element",
		"_window",
		"getWindow",
		"test",
		"Element",
		"nodeName",
		"plainObject",
		"constructor",
		"toString",
		"array",
		"length",
		"splice"
	],
	"mappings": "AAEA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAiCA,KAAK,KAAKF,GAAG,CAACC,MAAd,IAAwBF,QAAQ,CAACG,KAAD,CAAhF;;AAEA,MAAMC,OAAO,GAAID,KAAD,IAA2CE,MAAM,CAACF,KAAD,CAAN,IAAiBA,KAAK,CAACG,QAAN,KAAmB,EAA/F;;AAEA,MAAMD,MAAM,GAAIF,KAAD,IAAmD,CAAC,CAACA,KAAF,IAAW,OAAOA,KAAP,KAAiB,QAA9F;;AAEA,MAAMI,IAAI,GAAIJ,KAAD,IAAkD,OAAOA,KAAP,KAAiB,UAAhF;;AAEA,MAAMK,MAAM,GAAIL,KAAD,IAAiC,OAAOA,KAAP,KAAiB,QAAjE;;AAEA,MAAMM,IAAI,GAAIN,KAAD,IAAkC,OAAOA,KAAP,KAAiB,SAAhE;;AAEA,MAAMO,MAAM,GAAIP,KAAD,IAAiC,OAAOA,KAAP,KAAiB,QAAjE;;AAEA,MAAMQ,OAAO,GAAIR,KAAD,IAAkC;AAChD,MAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACvC,WAAO,KAAP;AACD,GAH+C,CAKhD;;;AACA,QAAMS,OAAO,GAAGX,GAAG,CAACY,SAAJ,CAAcV,KAAd,KAAwBF,GAAG,CAACC,MAA5C;;AAEA,SAAO,kBAAkBY,IAAlB,CAAuB,OAAOF,OAAO,CAACG,OAAtC,IACHZ,KAAK,YAAYS,OAAO,CAACG,OADtB,CAC8B;AAD9B,IAEHZ,KAAK,CAACG,QAAN,KAAmB,CAAnB,IAAwB,OAAOH,KAAK,CAACa,QAAb,KAA0B,QAFtD;AAGD,CAXD;;AAaA,MAAMC,WAA0B,GAAId,KAAD,IACjCE,MAAM,CAACF,KAAD,CAAN,IAAiB,CAAC,CAACA,KAAK,CAACe,WAAzB,IAAwC,oBAAoBJ,IAApB,CAAyBX,KAAK,CAACe,WAAN,CAAkBC,QAAlB,EAAzB,CAD1C;;AAGA,MAAMC,KAAK,GAAuBjB,KAApB,IACZE,MAAM,CAACF,KAAD,CAAN,IAAiB,OAAOA,KAAK,CAACkB,MAAb,KAAwB,WAAzC,IAAwDd,IAAI,CAACJ,KAAK,CAACmB,MAAP,CAD9D;;AAGA,eAAe;AACbpB,EAAAA,MADa;AAEbE,EAAAA,OAFa;AAGbC,EAAAA,MAHa;AAIbE,EAAAA,IAJa;AAKbC,EAAAA,MALa;AAMbC,EAAAA,IANa;AAObC,EAAAA,MAPa;AAQbC,EAAAA,OARa;AASbM,EAAAA,WATa;AAUbG,EAAAA;AAVa,CAAf",
	"sourcesContent": [
		"import type { Element } from '@interactjs/types/index'\n\nimport isWindow from './isWindow'\nimport * as win from './window'\n\nconst window = (thing: any): thing is Window => thing === win.window || isWindow(thing)\n\nconst docFrag = (thing: any): thing is DocumentFragment => object(thing) && thing.nodeType === 11\n\nconst object = (thing: any): thing is { [index: string]: any } => !!thing && typeof thing === 'object'\n\nconst func = (thing: any): thing is (...args: any[]) => any => typeof thing === 'function'\n\nconst number = (thing: any): thing is number => typeof thing === 'number'\n\nconst bool = (thing: any): thing is boolean => typeof thing === 'boolean'\n\nconst string = (thing: any): thing is string => typeof thing === 'string'\n\nconst element = (thing: any): thing is Element => {\n  if (!thing || typeof thing !== 'object') {\n    return false\n  }\n\n  // eslint-disable-next-line import/no-named-as-default-member\n  const _window = win.getWindow(thing) || win.window\n\n  return /object|function/.test(typeof _window.Element)\n    ? thing instanceof _window.Element // DOM2\n    : thing.nodeType === 1 && typeof thing.nodeName === 'string'\n}\n\nconst plainObject: typeof object = (thing: any): thing is { [index: string]: any } =>\n  object(thing) && !!thing.constructor && /function Object\\b/.test(thing.constructor.toString())\n\nconst array = <T extends unknown>(thing: any): thing is T[] =>\n  object(thing) && typeof thing.length !== 'undefined' && func(thing.splice)\n\nexport default {\n  window,\n  docFrag,\n  object,\n  func,\n  number,\n  bool,\n  string,\n  element,\n  plainObject,\n  array,\n}\n"
	]
}