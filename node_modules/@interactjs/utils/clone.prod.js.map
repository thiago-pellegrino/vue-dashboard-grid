{
	"version": 3,
	"sources": [
		"clone.ts"
	],
	"names": [
		"arr",
		"is",
		"clone",
		"source",
		"dest",
		"prop",
		"value",
		"plainObject",
		"array",
		"from"
	],
	"mappings": "UAAYA,MAAS,uBACdC,MAAQ,8BAGA,SAASC,EAAyBC,GAC/C,MAAMC,EAAO,GAEb,IAAK,MAAMC,KAAQF,EAAQ,CACzB,MAAMG,EAAQH,EAAOE,GAEjBJ,EAAGM,YAAYD,GACjBF,EAAKC,GAAQH,EAAMI,GACVL,EAAGO,MAAMF,GAClBF,EAAKC,GAAQL,EAAIS,KAAKH,GAEtBF,EAAKC,GAAQC,EAIjB,OAAOF",
	"sourcesContent": [
		"import * as arr from './arr'\nimport is from './is'\n\n// tslint:disable-next-line ban-types\nexport default function clone<T extends Object> (source: T): Partial<T> {\n  const dest = {} as Partial<T>\n\n  for (const prop in source) {\n    const value = source[prop]\n\n    if (is.plainObject(value)) {\n      dest[prop] = clone(value) as any\n    } else if (is.array(value)) {\n      dest[prop] = arr.from(value) as typeof value\n    } else {\n      dest[prop] = value\n    }\n  }\n\n  return dest\n}\n"
	]
}