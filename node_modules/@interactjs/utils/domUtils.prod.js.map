{
	"version": 3,
	"sources": [
		"domUtils.ts"
	],
	"names": [
		"browser",
		"domObjects",
		"is",
		"win",
		"nodeContains",
		"parent",
		"child",
		"contains",
		"parentNode",
		"closest",
		"element",
		"selector",
		"matchesSelector",
		"node",
		"docFrag",
		"host",
		"window",
		"realWindow",
		"replace",
		"prefixedMatchesSelector",
		"getParent",
		"el",
		"indexOfDeepestElement",
		"elements",
		"deepestNodeIndex",
		"deepestNodeParents",
		"i",
		"length",
		"currentNode",
		"deepestNode",
		"currentNodeParent",
		"deepestNodeParent",
		"ownerDocument",
		"higherNode",
		"lowerNode",
		"parseInt",
		"getWindow",
		"getComputedStyle",
		"zIndex",
		"ancestryStart",
		"getNodeParents",
		"HTMLElement",
		"SVGElement",
		"SVGSVGElement",
		"ownerSVGElement",
		"currentNodeParents",
		"commonIndex",
		"parents",
		"lastChild",
		"previousSibling",
		"limit",
		"parentParent",
		"unshift",
		"matchesUpTo",
		"getActualElement",
		"correspondingUseElement",
		"getScrollXY",
		"relevantWindow",
		"x",
		"scrollX",
		"document",
		"documentElement",
		"scrollLeft",
		"y",
		"scrollY",
		"scrollTop",
		"getElementClientRect",
		"clientRect",
		"getBoundingClientRect",
		"getClientRects",
		"left",
		"right",
		"top",
		"bottom",
		"width",
		"height",
		"getElementRect",
		"isIOS7",
		"scroll",
		"getPath",
		"path",
		"push",
		"trySelector",
		"value",
		"string",
		"querySelector"
	],
	"mappings": "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",
	"sourcesContent": [
		"import type { Rect, Target, Element } from '@interactjs/types/index'\n\nimport browser from './browser'\nimport domObjects from './domObjects'\nimport is from './is'\nimport * as win from './window'\n\nexport function nodeContains (parent: Node, child: Node) {\n  if (parent.contains) {\n    return parent.contains(child as Node)\n  }\n\n  while (child) {\n    if (child === parent) {\n      return true\n    }\n\n    child = (child as Node).parentNode\n  }\n\n  return false\n}\n\nexport function closest (element: Node, selector: string) {\n  while (is.element(element)) {\n    if (matchesSelector(element, selector)) {\n      return element\n    }\n\n    element = parentNode(element)\n  }\n\n  return null\n}\n\nexport function parentNode (node: Node | Document) {\n  let parent = node.parentNode\n\n  if (is.docFrag(parent)) {\n    // skip past #shado-root fragments\n    // tslint:disable-next-line\n    while ((parent = (parent as any).host) && is.docFrag(parent)) {\n      continue\n    }\n\n    return parent\n  }\n\n  return parent\n}\n\nexport function matchesSelector (element: Element, selector: string) {\n  // remove /deep/ from selectors if shadowDOM polyfill is used\n  if (win.window !== win.realWindow) {\n    selector = selector.replace(/\\/deep\\//g, ' ')\n  }\n\n  return element[browser.prefixedMatchesSelector](selector)\n}\n\nconst getParent = (el: Node | Document | ShadowRoot) => el.parentNode || (el as ShadowRoot).host\n\n// Test for the element that's \"above\" all other qualifiers\nexport function indexOfDeepestElement (elements: Element[] | NodeListOf<globalThis.Element>) {\n  let deepestNodeParents: Node[] = []\n  let deepestNodeIndex: number\n\n  for (let i = 0; i < elements.length; i++) {\n    const currentNode = elements[i]\n    const deepestNode: Node = elements[deepestNodeIndex]\n\n    // node may appear in elements array multiple times\n    if (!currentNode || i === deepestNodeIndex) {\n      continue\n    }\n\n    if (!deepestNode) {\n      deepestNodeIndex = i\n      continue\n    }\n\n    const currentNodeParent = getParent(currentNode)\n    const deepestNodeParent = getParent(deepestNode)\n\n    // check if the deepest or current are document.documentElement/rootElement\n    // - if the current node is, do nothing and continue\n    if (currentNodeParent === currentNode.ownerDocument) {\n      continue\n    }\n    // - if deepest is, update with the current node and continue to next\n    else if (deepestNodeParent === currentNode.ownerDocument) {\n      deepestNodeIndex = i\n      continue\n    }\n\n    // compare zIndex of siblings\n    if (currentNodeParent === deepestNodeParent) {\n      if (zIndexIsHigherThan(currentNode, deepestNode)) {\n        deepestNodeIndex = i\n      }\n\n      continue\n    }\n\n    // populate the ancestry array for the latest deepest node\n    deepestNodeParents = deepestNodeParents.length ? deepestNodeParents : getNodeParents(deepestNode)\n\n    let ancestryStart: Node\n\n    // if the deepest node is an HTMLElement and the current node is a non root svg element\n    if (\n      deepestNode instanceof domObjects.HTMLElement &&\n      currentNode instanceof domObjects.SVGElement &&\n      !(currentNode instanceof domObjects.SVGSVGElement)\n    ) {\n      // TODO: is this check necessary? Was this for HTML elements embedded in SVG?\n      if (currentNode === deepestNodeParent) {\n        continue\n      }\n\n      ancestryStart = currentNode.ownerSVGElement\n    } else {\n      ancestryStart = currentNode\n    }\n\n    const currentNodeParents = getNodeParents(ancestryStart, deepestNode.ownerDocument)\n    let commonIndex = 0\n\n    // get (position of closest common ancestor) + 1\n    while (\n      currentNodeParents[commonIndex] &&\n      currentNodeParents[commonIndex] === deepestNodeParents[commonIndex]\n    ) {\n      commonIndex++\n    }\n\n    const parents = [\n      currentNodeParents[commonIndex - 1],\n      currentNodeParents[commonIndex],\n      deepestNodeParents[commonIndex],\n    ]\n\n    if (parents[0]) {\n      let child = parents[0].lastChild\n\n      while (child) {\n        if (child === parents[1]) {\n          deepestNodeIndex = i\n          deepestNodeParents = currentNodeParents\n\n          break\n        } else if (child === parents[2]) {\n          break\n        }\n\n        child = child.previousSibling\n      }\n    }\n  }\n\n  return deepestNodeIndex\n}\n\nfunction getNodeParents (node: Node, limit?: Node) {\n  const parents: Node[] = []\n  let parent: Node = node\n  let parentParent: Node\n\n  while ((parentParent = getParent(parent)) && parent !== limit && parentParent !== parent.ownerDocument) {\n    parents.unshift(parent)\n    parent = parentParent\n  }\n\n  return parents\n}\n\nfunction zIndexIsHigherThan (higherNode: Node, lowerNode: Node) {\n  const higherIndex = parseInt(win.getWindow(higherNode).getComputedStyle(higherNode).zIndex, 10) || 0\n  const lowerIndex = parseInt(win.getWindow(lowerNode).getComputedStyle(lowerNode).zIndex, 10) || 0\n\n  return higherIndex >= lowerIndex\n}\n\nexport function matchesUpTo (element: Element, selector: string, limit: Node) {\n  while (is.element(element)) {\n    if (matchesSelector(element, selector)) {\n      return true\n    }\n\n    element = parentNode(element) as Element\n\n    if (element === limit) {\n      return matchesSelector(element, selector)\n    }\n  }\n\n  return false\n}\n\nexport function getActualElement (element: Element) {\n  return (element as SVGElement).correspondingUseElement || element\n}\n\nexport function getScrollXY (relevantWindow?: Window) {\n  relevantWindow = relevantWindow || win.window\n  return {\n    x: relevantWindow.scrollX || relevantWindow.document.documentElement.scrollLeft,\n    y: relevantWindow.scrollY || relevantWindow.document.documentElement.scrollTop,\n  }\n}\n\nexport function getElementClientRect (element: Element): Required<Rect> {\n  const clientRect =\n    element instanceof domObjects.SVGElement ? element.getBoundingClientRect() : element.getClientRects()[0]\n\n  return (\n    clientRect && {\n      left: clientRect.left,\n      right: clientRect.right,\n      top: clientRect.top,\n      bottom: clientRect.bottom,\n      width: clientRect.width || clientRect.right - clientRect.left,\n      height: clientRect.height || clientRect.bottom - clientRect.top,\n    }\n  )\n}\n\nexport function getElementRect (element: Element) {\n  const clientRect = getElementClientRect(element)\n\n  if (!browser.isIOS7 && clientRect) {\n    const scroll = getScrollXY(win.getWindow(element))\n\n    clientRect.left += scroll.x\n    clientRect.right += scroll.x\n    clientRect.top += scroll.y\n    clientRect.bottom += scroll.y\n  }\n\n  return clientRect\n}\n\nexport function getPath (node: Node | Document) {\n  const path = []\n\n  while (node) {\n    path.push(node)\n    node = parentNode(node)\n  }\n\n  return path\n}\n\nexport function trySelector (value: Target) {\n  if (!is.string(value)) {\n    return false\n  }\n\n  // an exception will be raised if it is invalid\n  domObjects.document.querySelector(value)\n  return true\n}\n"
	]
}