{
	"version": 3,
	"sources": [
		"interactablePreventDefault.ts"
	],
	"names": [
		"matchesSelector",
		"nodeContains",
		"is",
		"getWindow",
		"preventDefault",
		"newValue",
		"test",
		"this",
		"options",
		"bool",
		"onInteractionEvent",
		"interaction",
		"event",
		"interactable",
		"checkAndPreventDefault",
		"install",
		"scope",
		"Interactable",
		"prototype",
		"setting",
		"events",
		"supportsPassive",
		"type",
		"doc",
		"target",
		"document",
		"docOptions",
		"getDocOptions",
		"passive",
		"element",
		"interactions",
		"docEvents",
		"push",
		"listener",
		"list",
		"id",
		"listeners",
		"reduce",
		"acc",
		"eventType"
	],
	"mappings": "0BAISA,kBAAiBC,MAAoB,mCACvCC,MAAQ,0CACNC,MAAiB,0BAY1B,SAASC,EAAoCC,GAC3C,MAAI,wBAAwBC,KAAKD,IAC/BE,KAAKC,QAAQJ,eAAiBC,EACvBE,MAGLL,EAAGO,KAAKJ,IACVE,KAAKC,QAAQJ,eAAiBC,EAAW,SAAW,QAC7CE,MAGFA,KAAKC,QAAQJ,eA2CtB,SAASM,GAAoBC,YAAEA,EAAFC,MAAeA,IACtCD,EAAYE,cACdF,EAAYE,aAAaC,uBAAuBF,UAI7C,SAASG,QAASC,GAEvB,MAAMC,aAAEA,GAAiBD,EAYzBC,EAAaC,UAAUd,eAAiBA,EAExCa,EAAaC,UAAUJ,uBAAyB,SAAUF,GACxD,MA/DJ,EAAiCC,EAA4BG,EAAcJ,KACzE,MAAMO,EAAUN,EAAaL,QAAQJ,eAErC,GAAgB,UAAZe,EAEJ,GAAgB,WAAZA,EAAJ,CAUA,GAAIH,EAAMI,OAAOC,iBAAmB,sBAAsBf,KAAKM,EAAMU,MAAO,CAC1E,MAAMC,EAAMpB,EAAUS,EAAMY,QAAQC,SAC9BC,EAAaV,EAAMW,cAAcJ,GAEvC,IAAMG,IAAcA,EAAWN,SAAyC,IAA9BM,EAAWN,OAAOQ,QAC1D,OAKA,uCAAuCtB,KAAKM,EAAMU,OAMpDpB,EAAG2B,QAAQjB,EAAMY,SACjBxB,EAAgBY,EAAMY,OAAQ,0EAKhCZ,EAAMR,sBA/BJQ,EAAMR,kBAyDCU,CAAuBP,KAAMS,EAAOJ,IAI7CI,EAAMc,aAAaC,UAAUC,KAAK,CAChCV,KAAM,YACNW,SAAUrB,GACR,IAAK,MAAMD,KAAeK,EAAMc,aAAaI,KAC3C,GACEvB,EAAYkB,UACXlB,EAAYkB,UAAYjB,EAAMY,QAAUvB,EAAaU,EAAYkB,QAASjB,EAAMY,SAGjF,YADAb,EAAYE,aAAaC,uBAAuBF,oBAQ3C,CACbuB,GAAI,kCACJpB,QAAAA,QACAqB,UAAW,CAAC,OAAQ,OAAQ,KAAM,UAAUC,QAAO,CAACC,EAAKC,KACvDD,EAAK,gBAAeC,GAAe7B,EAC5B4B,IACN",
	"sourcesContent": [
		"import type { Interactable } from '@interactjs/core/Interactable'\nimport type Interaction from '@interactjs/core/Interaction'\nimport type { Scope } from '@interactjs/core/scope'\nimport type { PointerEventType } from '@interactjs/types/index'\nimport { matchesSelector, nodeContains } from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport { getWindow } from '@interactjs/utils/window'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    preventDefault: typeof preventDefault\n    checkAndPreventDefault: (event: Event) => void\n  }\n}\n\ntype PreventDefaultValue = 'always' | 'never' | 'auto'\nfunction preventDefault(this: Interactable): PreventDefaultValue\nfunction preventDefault(this: Interactable, newValue: PreventDefaultValue): typeof this\nfunction preventDefault (this: Interactable, newValue?: PreventDefaultValue) {\n  if (/^(always|never|auto)$/.test(newValue)) {\n    this.options.preventDefault = newValue\n    return this\n  }\n\n  if (is.bool(newValue)) {\n    this.options.preventDefault = newValue ? 'always' : 'never'\n    return this\n  }\n\n  return this.options.preventDefault\n}\n\nfunction checkAndPreventDefault (interactable: Interactable, scope: Scope, event: Event) {\n  const setting = interactable.options.preventDefault\n\n  if (setting === 'never') return\n\n  if (setting === 'always') {\n    event.preventDefault()\n    return\n  }\n\n  // setting === 'auto'\n\n  // if the browser supports passive event listeners and isn't running on iOS,\n  // don't preventDefault of touch{start,move} events. CSS touch-action and\n  // user-select should be used instead of calling event.preventDefault().\n  if (scope.events.supportsPassive && /^touch(start|move)$/.test(event.type)) {\n    const doc = getWindow(event.target).document\n    const docOptions = scope.getDocOptions(doc)\n\n    if (!(docOptions && docOptions.events) || docOptions.events.passive !== false) {\n      return\n    }\n  }\n\n  // don't preventDefault of pointerdown events\n  if (/^(mouse|pointer|touch)*(down|start)/i.test(event.type)) {\n    return\n  }\n\n  // don't preventDefault on editable elements\n  if (\n    is.element(event.target) &&\n    matchesSelector(event.target, 'input,select,textarea,[contenteditable=true],[contenteditable=true] *')\n  ) {\n    return\n  }\n\n  event.preventDefault()\n}\n\nfunction onInteractionEvent ({ interaction, event }: { interaction: Interaction, event: PointerEventType }) {\n  if (interaction.interactable) {\n    interaction.interactable.checkAndPreventDefault(event as Event)\n  }\n}\n\nexport function install (scope: Scope) {\n  /** @lends Interactable */\n  const { Interactable } = scope\n\n  /**\n   * Returns or sets whether to prevent the browser's default behaviour in\n   * response to pointer events. Can be set to:\n   *  - `'always'` to always prevent\n   *  - `'never'` to never prevent\n   *  - `'auto'` to let interact.js try to determine what would be best\n   *\n   * @param {string} [newValue] `'always'`, `'never'` or `'auto'`\n   * @return {string | Interactable} The current setting or this Interactable\n   */\n  Interactable.prototype.preventDefault = preventDefault\n\n  Interactable.prototype.checkAndPreventDefault = function (event) {\n    return checkAndPreventDefault(this, scope, event)\n  }\n\n  // prevent native HTML5 drag on interact.js target elements\n  scope.interactions.docEvents.push({\n    type: 'dragstart',\n    listener (event) {\n      for (const interaction of scope.interactions.list) {\n        if (\n          interaction.element &&\n          (interaction.element === event.target || nodeContains(interaction.element, event.target))\n        ) {\n          interaction.interactable.checkAndPreventDefault(event)\n          return\n        }\n      }\n    },\n  })\n}\n\nexport default {\n  id: 'core/interactablePreventDefault',\n  install,\n  listeners: ['down', 'move', 'up', 'cancel'].reduce((acc, eventType) => {\n    acc[`interactions:${eventType}`] = onInteractionEvent\n    return acc\n  }, {} as any),\n}\n"
	]
}