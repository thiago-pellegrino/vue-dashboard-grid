{
	"version": 3,
	"sources": [
		"Interactable.ts"
	],
	"names": [
		"arr",
		"browser",
		"clone",
		"getElementRect",
		"matchesUpTo",
		"nodeContains",
		"trySelector",
		"extend",
		"is",
		"normalizeListeners",
		"getWindow",
		"Eventable",
		"isNonNativeEvent",
		"Interactable",
		"_defaults",
		"base",
		"perAction",
		"actions",
		"constructor",
		"target",
		"options",
		"defaultContext",
		"scopeEvents",
		"_actions",
		"events",
		"_context",
		"_win",
		"_doc",
		"_scopeEvents",
		"_rectChecker",
		"context",
		"document",
		"set",
		"setOnEvents",
		"actionName",
		"phases",
		"func",
		"onstart",
		"on",
		"onmove",
		"onend",
		"oninertiastart",
		"updatePerActionListeners",
		"prev",
		"cur",
		"array",
		"object",
		"off",
		"setPerAction",
		"defaults",
		"optionName_",
		"optionName",
		"actionOptions",
		"optionValue",
		"listeners",
		"from",
		"plainObject",
		"enabled",
		"bool",
		"getRect",
		"element",
		"string",
		"querySelector",
		"rectChecker",
		"checker",
		"rect",
		"width",
		"right",
		"left",
		"height",
		"bottom",
		"top",
		"_backCompatOption",
		"newValue",
		"action",
		"map",
		"origin",
		"deltaSource",
		"inContext",
		"ownerDocument",
		"testIgnoreAllow",
		"targetNode",
		"eventTarget",
		"testIgnore",
		"ignoreFrom",
		"testAllow",
		"allowFrom",
		"fire",
		"iEvent",
		"_onOff",
		"method",
		"typeArg",
		"listenerArg",
		"addRemove",
		"type",
		"wheelEvent",
		"listener",
		"types",
		"actionName_",
		"methodDict",
		"methodName",
		"setting",
		"unset",
		"delegatedEvents",
		"delegated",
		"i",
		"length",
		"selector",
		"splice",
		"l",
		"removeDelegate",
		"remove"
	],
	"mappings": "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",
	"sourcesContent": [
		"/* eslint-disable no-dupe-class-members */\nimport type { ActionMap, ActionName, Actions, Scope } from '@interactjs/core/scope'\nimport type {\n  Context,\n  Element,\n  Target,\n  Listeners,\n  OrBoolean,\n  EventTypes,\n  ListenersArg,\n  ActionMethod,\n} from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\n\nimport { Eventable } from './Eventable'\nimport isNonNativeEvent from './isNonNativeEvent'\nimport type { ActionDefaults, Defaults, OptionsArg, PerActionDefaults } from './options'\nimport { Options } from './options'\n\ntype IgnoreValue = string | Element | boolean\ntype DeltaSource = 'page' | 'client'\n\n/** */\nexport class Interactable implements Partial<Eventable> {\n  /** @internal */ get _defaults (): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly options!: Required<Options>\n  readonly _actions: Actions\n  readonly target: Target\n  readonly events = new Eventable()\n  readonly _context: Context\n  readonly _win: Window\n  readonly _doc: Document\n  readonly _scopeEvents: Scope['events']\n\n  /** @internal */ _rectChecker?: typeof Interactable.prototype.getRect\n\n  /** */\n  constructor (\n    target: Target,\n    options: any,\n    defaultContext: Document | Element,\n    scopeEvents: Scope['events'],\n  ) {\n    this._actions = options.actions\n    this.target = target\n    this._context = options.context || defaultContext\n    this._win = getWindow(trySelector(target) ? this._context : target)\n    this._doc = this._win.document\n    this._scopeEvents = scopeEvents\n\n    this.set(options)\n  }\n\n  setOnEvents (actionName: ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) {\n      this.on(`${actionName}start`, phases.onstart)\n    }\n    if (is.func(phases.onmove)) {\n      this.on(`${actionName}move`, phases.onmove)\n    }\n    if (is.func(phases.onend)) {\n      this.on(`${actionName}end`, phases.onend)\n    }\n    if (is.func(phases.oninertiastart)) {\n      this.on(`${actionName}inertiastart`, phases.oninertiastart)\n    }\n\n    return this\n  }\n\n  updatePerActionListeners (actionName: ActionName, prev: Listeners, cur: Listeners) {\n    if (is.array(prev) || is.object(prev)) {\n      this.off(actionName, prev)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this.on(actionName, cur)\n    }\n  }\n\n  setPerAction (actionName: ActionName, options: OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array(optionValue)) {\n        ;(actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        ;(actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || ({} as any),\n          clone(optionValue),\n        )\n\n        // set anabled field to true if it exists in the defaults\n        if (\n          is.object(defaults.perAction[optionName]) &&\n          'enabled' in (defaults.perAction[optionName] as any)\n        ) {\n          ;(actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        ;(actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        ;(actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {Rect} The object's bounding rectangle.\n   */\n  getRect (element: Element) {\n    element = element || (is.element(this.target) ? this.target : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker(): (element: Element) => any | null\n  rectChecker(checker: (element: Element) => any): this\n  rectChecker (checker?: (element: Element) => any) {\n    if (is.func(checker)) {\n      this._rectChecker = checker\n\n      this.getRect = (element) => {\n        const rect = extend({}, this._rectChecker(element))\n\n        if (!(('width' in rect) as unknown)) {\n          rect.width = rect.right - rect.left\n          rect.height = rect.bottom - rect.top\n        }\n\n        return rect\n      }\n\n      return this\n    }\n\n    if (checker === null) {\n      delete this.getRect\n      delete this._rectChecker\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  _backCompatOption (optionName: keyof Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      ;(this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        ;(this.options[action as keyof ActionMap] as any)[optionName] = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin (newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource(): DeltaSource\n  deltaSource(newValue: DeltaSource): this\n  deltaSource (newValue?: DeltaSource) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context () {\n    return this._context\n  }\n\n  inContext (element: Document | Node) {\n    return this._context === element.ownerDocument || nodeContains(this._context, element)\n  }\n\n  testIgnoreAllow (\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue, allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Node,\n  ) {\n    return (\n      !this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n      this.testAllow(options.allowFrom, targetNode, eventTarget)\n    )\n  }\n\n  testAllow (this: Interactable, allowFrom: IgnoreValue, targetNode: Node, element: Node) {\n    if (!allowFrom) {\n      return true\n    }\n\n    if (!is.element(element)) {\n      return false\n    }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    } else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  testIgnore (this: Interactable, ignoreFrom: IgnoreValue, targetNode: Node, element: Node) {\n    if (!ignoreFrom || !is.element(element)) {\n      return false\n    }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    } else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire<E extends { type: string }> (iEvent: E) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  _onOff (method: 'on' | 'off', typeArg: EventTypes, listenerArg?: ListenersArg | null, options?: any) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const addRemove = method === 'on' ? 'add' : 'remove'\n    const listeners = normalizeListeners(typeArg, listenerArg)\n\n    for (let type in listeners) {\n      if (type === 'wheel') {\n        type = browser.wheelEvent\n      }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          this._scopeEvents[`${addRemove}Delegate` as 'addDelegate' | 'removeDelegate'](\n            this.target,\n            this._context,\n            type,\n            listener,\n            options,\n          )\n        }\n        // remove listener from this Interactable's element\n        else {\n          this._scopeEvents[addRemove](this.target, type, listener, options)\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on (types: EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff('on', types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off (types: string | string[] | EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff('off', types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set (options: OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    ;(this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n      ;(this[methodName] as ActionMethod<unknown>)(options[actionName])\n    }\n\n    for (const setting in options) {\n      if (is.func((this as any)[setting])) {\n        ;(this as any)[setting](options[setting as keyof typeof options])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   */\n  unset () {\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in this._scopeEvents.delegatedEvents) {\n        const delegated = this._scopeEvents.delegatedEvents[type]\n\n        for (let i = delegated.length - 1; i >= 0; i--) {\n          const { selector, context, listeners } = delegated[i]\n\n          if (selector === this.target && context === this._context) {\n            delegated.splice(i, 1)\n          }\n\n          for (let l = listeners.length - 1; l >= 0; l--) {\n            this._scopeEvents.removeDelegate(\n              this.target,\n              this._context,\n              type,\n              listeners[l][0],\n              listeners[l][1],\n            )\n          }\n        }\n      }\n    } else {\n      this._scopeEvents.remove(this.target as Node, 'all')\n    }\n  }\n}\n"
	]
}