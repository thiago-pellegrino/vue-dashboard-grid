{
	"version": 3,
	"sources": [
		"InteractStatic.ts"
	],
	"names": [
		"browser",
		"domUtils",
		"is",
		"warnOnce",
		"pointerUtils",
		"isNonNativeEvent",
		"createInteractStatic",
		"scope",
		"interact",
		"target",
		"options",
		"interactable",
		"interactables",
		"get",
		"new",
		"events",
		"global",
		"globalEvents",
		"getPointerAverage",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"version",
		"use",
		"plugin",
		"usePlugin",
		"isSet",
		"context",
		"on",
		"type",
		"listener",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument"
	],
	"mappings": "AAAA;AAGA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,sBAA1B;AACA,OAAOC,EAAP,MAAe,gBAAf;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAGA,OAAOC,gBAAP,MAA6B,uBAA7B;AAuCA,OAAO,SAASC,oBAAT,CAA+BC,KAA/B,EAA8D;AACnE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMC,QAAQ,GAAI,CAACC,MAAD,EAAiBC,OAAjB,KAAsC;AACtD,QAAIC,YAAY,GAAGJ,KAAK,CAACK,aAAN,CAAoBC,GAApB,CAAwBJ,MAAxB,EAAgCC,OAAhC,CAAnB;;AAEA,QAAI,CAACC,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAGJ,KAAK,CAACK,aAAN,CAAoBE,GAApB,CAAwBL,MAAxB,EAAgCC,OAAhC,CAAf;AACAC,MAAAA,YAAY,CAACI,MAAb,CAAoBC,MAApB,GAA6BR,QAAQ,CAACS,YAAtC;AACD;;AAED,WAAON,YAAP;AACD,GATD,CA1BmE,CAqCnE;;;AACAH,EAAAA,QAAQ,CAACU,iBAAT,GAA6Bd,YAAY,CAACe,cAA1C;AACAX,EAAAA,QAAQ,CAACY,YAAT,GAAwBhB,YAAY,CAACiB,SAArC;AACAb,EAAAA,QAAQ,CAACc,gBAAT,GAA4BlB,YAAY,CAACmB,aAAzC;AACAf,EAAAA,QAAQ,CAACgB,aAAT,GAAyBpB,YAAY,CAACqB,UAAtC;AAEAjB,EAAAA,QAAQ,CAACkB,cAAT,GAA0BzB,QAAQ,CAACyB,cAAnC;AACAlB,EAAAA,QAAQ,CAACmB,oBAAT,GAAgC1B,QAAQ,CAAC0B,oBAAzC;AACAnB,EAAAA,QAAQ,CAACoB,eAAT,GAA2B3B,QAAQ,CAAC2B,eAApC;AACApB,EAAAA,QAAQ,CAACqB,OAAT,GAAmB5B,QAAQ,CAAC4B,OAA5B;AAEArB,EAAAA,QAAQ,CAACS,YAAT,GAAwB,EAAxB,CAhDmE,CAkDnE;;AACAT,EAAAA,QAAQ,CAACsB,OAAT;AACAtB,EAAAA,QAAQ,CAACD,KAAT,GAAiBA,KAAjB;AACA;AACF;AACA;AACA;AACA;AACA;;AACEC,EAAAA,QAAQ,CAACuB,GAAT,GAAe,UAAUC,MAAV,EAAkBtB,OAAlB,EAA2B;AACxC,SAAKH,KAAL,CAAW0B,SAAX,CAAqBD,MAArB,EAA6BtB,OAA7B;AAEA,WAAO,IAAP;AACD,GAJD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEF,EAAAA,QAAQ,CAAC0B,KAAT,GAAiB,UAAUzB,MAAV,EAA0BC,OAA1B,EAAoE;AACnF,WAAO,CAAC,CAAC,KAAKH,KAAL,CAAWK,aAAX,CAAyBC,GAAzB,CAA6BJ,MAA7B,EAAqCC,OAAO,IAAIA,OAAO,CAACyB,OAAxD,CAAT;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE3B,EAAAA,QAAQ,CAAC4B,EAAT,GAAcjC,QAAQ,CAAC,SAASiC,EAAT,CAAaC,IAAb,EAAwCC,QAAxC,EAAgE5B,OAAhE,EAAkF;AACvG,QAAIR,EAAE,CAACqC,MAAH,CAAUF,IAAV,KAAmBA,IAAI,CAACG,MAAL,CAAY,GAAZ,MAAqB,CAAC,CAA7C,EAAgD;AAC9CH,MAAAA,IAAI,GAAGA,IAAI,CAACI,IAAL,GAAYC,KAAZ,CAAkB,IAAlB,CAAP;AACD;;AAED,QAAIxC,EAAE,CAACyC,KAAH,CAASN,IAAT,CAAJ,EAAoB;AAClB,WAAK,MAAMO,SAAX,IAAwBP,IAAxB,EAAuC;AACrC,aAAKD,EAAL,CAAQQ,SAAR,EAAmBN,QAAnB,EAA6B5B,OAA7B;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAIR,EAAE,CAAC2C,MAAH,CAAUR,IAAV,CAAJ,EAAqB;AACnB,WAAK,MAAMS,IAAX,IAAmBT,IAAnB,EAAyB;AACvB,aAAKD,EAAL,CAAQU,IAAR,EAAeT,IAAD,CAAcS,IAAd,CAAd,EAAmCR,QAAnC;AACD;;AAED,aAAO,IAAP;AACD,KAnBsG,CAqBvG;;;AACA,QAAIjC,gBAAgB,CAACgC,IAAD,EAAO,KAAK9B,KAAL,CAAWwC,OAAlB,CAApB,EAAgD;AAC9C;AACA,UAAI,CAAC,KAAK9B,YAAL,CAAkBoB,IAAlB,CAAL,EAA8B;AAC5B,aAAKpB,YAAL,CAAkBoB,IAAlB,IAA0B,CAACC,QAAD,CAA1B;AACD,OAFD,MAEO;AACL,aAAKrB,YAAL,CAAkBoB,IAAlB,EAAwBW,IAAxB,CAA6BV,QAA7B;AACD;AACF,KAPD,CAQA;AARA,SASK;AACH,aAAK/B,KAAL,CAAWQ,MAAX,CAAkBkC,GAAlB,CAAsB,KAAK1C,KAAL,CAAW2C,QAAjC,EAA2Cb,IAA3C,EAAiDC,QAAjD,EAAuE;AAAE5B,UAAAA;AAAF,SAAvE;AACD;;AAED,WAAO,IAAP;AACD,GApCqB,EAoCnB,8CApCmB,CAAtB;AAsCA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACEF,EAAAA,QAAQ,CAAC2C,GAAT,GAAehD,QAAQ,CAAC,SAASgD,GAAT,CAAcd,IAAd,EAAgCC,QAAhC,EAA+C5B,OAA/C,EAAiE;AACvF,QAAIR,EAAE,CAACqC,MAAH,CAAUF,IAAV,KAAmBA,IAAI,CAACG,MAAL,CAAY,GAAZ,MAAqB,CAAC,CAA7C,EAAgD;AAC9CH,MAAAA,IAAI,GAAGA,IAAI,CAACI,IAAL,GAAYC,KAAZ,CAAkB,IAAlB,CAAP;AACD;;AAED,QAAIxC,EAAE,CAACyC,KAAH,CAASN,IAAT,CAAJ,EAAoB;AAClB,WAAK,MAAMO,SAAX,IAAwBP,IAAxB,EAA8B;AAC5B,aAAKc,GAAL,CAASP,SAAT,EAAoBN,QAApB,EAA8B5B,OAA9B;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAIR,EAAE,CAAC2C,MAAH,CAAUR,IAAV,CAAJ,EAAqB;AACnB,WAAK,MAAMS,IAAX,IAAmBT,IAAnB,EAAyB;AACvB,aAAKc,GAAL,CAASL,IAAT,EAAeT,IAAI,CAACS,IAAD,CAAnB,EAA2BR,QAA3B;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAIjC,gBAAgB,CAACgC,IAAD,EAAO,KAAK9B,KAAL,CAAWwC,OAAlB,CAApB,EAAgD;AAC9C,UAAIK,KAAJ;;AAEA,UAAIf,IAAI,IAAI,KAAKpB,YAAb,IAA6B,CAACmC,KAAK,GAAG,KAAKnC,YAAL,CAAkBoB,IAAlB,EAAwBgB,OAAxB,CAAgCf,QAAhC,CAAT,MAAwD,CAAC,CAA1F,EAA6F;AAC3F,aAAKrB,YAAL,CAAkBoB,IAAlB,EAAwBiB,MAAxB,CAA+BF,KAA/B,EAAsC,CAAtC;AACD;AACF,KAND,MAMO;AACL,WAAK7C,KAAL,CAAWQ,MAAX,CAAkBwC,MAAlB,CAAyB,KAAKhD,KAAL,CAAW2C,QAApC,EAA8Cb,IAA9C,EAAoDC,QAApD,EAA8D5B,OAA9D;AACD;;AAED,WAAO,IAAP;AACD,GAhCsB,EAgCpB,+CAhCoB,CAAvB;;AAkCAF,EAAAA,QAAQ,CAACgD,KAAT,GAAiB,YAAY;AAC3B,WAAO,KAAKjD,KAAZ;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,CAACiD,aAAT,GAAyB,YAAY;AACnC,WAAOzD,OAAO,CAACyD,aAAf;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;;;AACEjD,EAAAA,QAAQ,CAACkD,oBAAT,GAAgC,YAAY;AAC1C,WAAO1D,OAAO,CAAC0D,oBAAf;AACD,GAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACElD,EAAAA,QAAQ,CAACmD,IAAT,GAAgB,YAAY;AAC1B,SAAK,MAAMC,WAAX,IAA0B,KAAKrD,KAAL,CAAWsD,YAAX,CAAwBC,IAAlD,EAAwD;AACtDF,MAAAA,WAAW,CAACD,IAAZ;AACD;;AAED,WAAO,IAAP;AACD,GAND;AAQA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEnD,EAAAA,QAAQ,CAACuD,oBAAT,GAAgC,UAAUC,QAAV,EAA6B;AAC3D,QAAI9D,EAAE,CAAC+D,MAAH,CAAUD,QAAV,CAAJ,EAAyB;AACvB,WAAKzD,KAAL,CAAWsD,YAAX,CAAwBE,oBAAxB,GAA+CC,QAA/C;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAKzD,KAAL,CAAWsD,YAAX,CAAwBE,oBAA/B;AACD,GARD;;AAUAvD,EAAAA,QAAQ,CAAC0D,WAAT,GAAuB,UAAUC,GAAV,EAAyBzD,OAAzB,EAA2C;AAChE,SAAKH,KAAL,CAAW2D,WAAX,CAAuBC,GAAvB,EAA4BzD,OAA5B;AACD,GAFD;;AAIAF,EAAAA,QAAQ,CAAC4D,cAAT,GAA0B,UAAUD,GAAV,EAAyB;AACjD,SAAK5D,KAAL,CAAW6D,cAAX,CAA0BD,GAA1B;AACD,GAFD;;AAIA,SAAO3D,QAAP;AACD",
	"sourcesContent": [
		"/** @module interact */\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Context, EventTypes, Listener, ListenersArg, Target, Element } from '@interactjs/types/index'\nimport browser from '@interactjs/utils/browser'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport { warnOnce } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport type { Interactable } from './Interactable'\nimport isNonNativeEvent from './isNonNativeEvent'\nimport type { Options } from './options'\n\ndeclare module '@interactjs/core/InteractStatic' {\n  export interface InteractStatic {\n    (target: Target, options?: Options): Interactable\n    getPointerAverage: typeof pointerUtils.pointerAverage\n    getTouchBBox: typeof pointerUtils.touchBBox\n    getTouchDistance: typeof pointerUtils.touchDistance\n    getTouchAngle: typeof pointerUtils.touchAngle\n    getElementRect: typeof domUtils.getElementRect\n    getElementClientRect: typeof domUtils.getElementClientRect\n    matchesSelector: typeof domUtils.matchesSelector\n    closest: typeof domUtils.closest\n    /** @internal */ globalEvents: any\n    version: string\n    /** @internal */ scope: Scope\n    use(\n      plugin: Plugin,\n      options?: {\n        [key: string]: any\n      },\n    ): any\n    isSet(target: Element, options?: any): boolean\n    on(type: string | EventTypes, listener: ListenersArg, options?: object): any\n    off(type: EventTypes, listener: any, options?: object): any\n    debug(): any\n    supportsTouch(): boolean\n    supportsPointerEvent(): boolean\n    stop(): any\n    pointerMoveTolerance(newValue?: number): any\n    addDocument(doc: Document, options?: object): void\n    removeDocument(doc: Document): void\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype _InteractStatic = import('@interactjs/core/InteractStatic').InteractStatic\n\nexport function createInteractStatic (scope: Scope): _InteractStatic {\n  /**\n   * ```js\n   * interact('#draggable').draggable(true)\n   *\n   * var rectables = interact('rect')\n   * rectables\n   *   .gesturable(true)\n   *   .on('gesturemove', function (event) {\n   *       // ...\n   *   })\n   * ```\n   *\n   * The methods of this variable can be used to set elements as interactables\n   * and also to change various default settings.\n   *\n   * Calling it as a function and passing an element or a valid CSS selector\n   * string returns an Interactable object which has various methods to configure\n   * it.\n   *\n   * @global\n   *\n   * @param {Element | string} target The HTML or SVG Element to interact with\n   * or CSS selector\n   * @return {Interactable}\n   */\n  const interact = ((target: Target, options: Options) => {\n    let interactable = scope.interactables.get(target, options)\n\n    if (!interactable) {\n      interactable = scope.interactables.new(target, options)\n      interactable.events.global = interact.globalEvents\n    }\n\n    return interactable\n  }) as _InteractStatic\n\n  // expose the functions used to calculate multi-touch properties\n  interact.getPointerAverage = pointerUtils.pointerAverage\n  interact.getTouchBBox = pointerUtils.touchBBox\n  interact.getTouchDistance = pointerUtils.touchDistance\n  interact.getTouchAngle = pointerUtils.touchAngle\n\n  interact.getElementRect = domUtils.getElementRect\n  interact.getElementClientRect = domUtils.getElementClientRect\n  interact.matchesSelector = domUtils.matchesSelector\n  interact.closest = domUtils.closest\n\n  interact.globalEvents = {} as any\n\n  // eslint-disable-next-line no-undef\n  interact.version = process.env.npm_package_version\n  interact.scope = scope\n  /**\n   * Use a plugin\n   *\n   * @alias module:interact.use\n   *\n   */\n  interact.use = function (plugin, options) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  /**\n   * Check if an element or selector has been set with the {@link interact}\n   * function\n   *\n   * @alias module:interact.isSet\n   *\n   * @param {Target} target The Element or string being searched for\n   * @param {object} options\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  interact.isSet = function (target: Target, options?: { context?: Context }): boolean {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  /**\n   * @deprecated\n   * Add a global listener for an InteractEvent or adds a DOM event to `document`\n   *\n   * @alias module:interact.on\n   *\n   * @param {string | array | object} type The types of events to listen for\n   * @param {function} listener The function event (s)\n   * @param {object | boolean} [options] object or useCapture flag for\n   * addEventListener\n   * @return {object} interact\n   */\n  interact.on = warnOnce(function on (type: string | EventTypes, listener: ListenersArg, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type as any[]) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      } else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Listener, { options })\n    }\n\n    return this\n  }, 'The interact.on() method is being deprecated')\n\n  /**\n   * @deprecated\n   * Removes a global InteractEvent listener or DOM event from `document`\n   *\n   * @alias module:interact.off\n   *\n   * @param {string | array | object} type The types of events that were listened\n   * for\n   * @param {function} listener The listener function to be removed\n   * @param {object | boolean} options [options] object or useCapture flag for\n   * removeEventListener\n   * @return {object} interact\n   */\n  interact.off = warnOnce(function off (type: EventTypes, listener: any, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents && (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    } else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }, 'The interact.off() method is being deprecated')\n\n  interact.debug = function () {\n    return this.scope\n  }\n\n  /**\n   * @alias module:interact.supportsTouch\n   *\n   * @return {boolean} Whether or not the browser supports touch input\n   */\n  interact.supportsTouch = function () {\n    return browser.supportsTouch\n  }\n\n  /**\n   * @alias module:interact.supportsPointerEvent\n   *\n   * @return {boolean} Whether or not the browser supports PointerEvents\n   */\n  interact.supportsPointerEvent = function () {\n    return browser.supportsPointerEvent\n  }\n\n  /**\n   * Cancels all interactions (end events are not fired)\n   *\n   * @alias module:interact.stop\n   *\n   * @return {object} interact\n   */\n  interact.stop = function () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   *\n   * @alias module:interact.pointerMoveTolerance\n   *\n   * @param {number} [newValue] The movement from the start position must be greater than this value\n   * @return {interact | number}\n   */\n  interact.pointerMoveTolerance = function (newValue?: number) {\n    if (is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  interact.addDocument = function (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  interact.removeDocument = function (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n\n  return interact\n}\n"
	]
}