{
	"version": 3,
	"sources": [
		"Interactable.ts"
	],
	"names": [
		"arr",
		"browser",
		"clone",
		"getElementRect",
		"matchesUpTo",
		"nodeContains",
		"trySelector",
		"extend",
		"is",
		"normalizeListeners",
		"getWindow",
		"Eventable",
		"isNonNativeEvent",
		"Interactable",
		"_defaults",
		"base",
		"perAction",
		"actions",
		"constructor",
		"target",
		"options",
		"defaultContext",
		"scopeEvents",
		"this",
		"_actions",
		"events",
		"_context",
		"_win",
		"_doc",
		"_scopeEvents",
		"_rectChecker",
		"context",
		"document",
		"set",
		"setOnEvents",
		"actionName",
		"phases",
		"func",
		"onstart",
		"on",
		"onmove",
		"onend",
		"oninertiastart",
		"updatePerActionListeners",
		"prev",
		"cur",
		"array",
		"object",
		"off",
		"setPerAction",
		"defaults",
		"optionName_",
		"optionName",
		"actionOptions",
		"optionValue",
		"listeners",
		"from",
		"plainObject",
		"enabled",
		"bool",
		"getRect",
		"element",
		"string",
		"querySelector",
		"rectChecker",
		"checker",
		"rect",
		"width",
		"right",
		"left",
		"height",
		"bottom",
		"top",
		"_backCompatOption",
		"newValue",
		"action",
		"map",
		"origin",
		"deltaSource",
		"inContext",
		"ownerDocument",
		"testIgnoreAllow",
		"targetNode",
		"eventTarget",
		"testIgnore",
		"ignoreFrom",
		"testAllow",
		"allowFrom",
		"fire",
		"iEvent",
		"_onOff",
		"method",
		"typeArg",
		"listenerArg",
		"addRemove",
		"type",
		"wheelEvent",
		"listener",
		"types",
		"actionName_",
		"methodDict",
		"methodName",
		"setting",
		"unset",
		"delegatedEvents",
		"delegated",
		"i",
		"length",
		"selector",
		"splice",
		"l",
		"removeDelegate",
		"remove"
	],
	"mappings": "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",
	"sourcesContent": [
		"/* eslint-disable no-dupe-class-members */\nimport type { ActionMap, ActionName, Actions, Scope } from '@interactjs/core/scope'\nimport type {\n  Context,\n  Element,\n  Target,\n  Listeners,\n  OrBoolean,\n  EventTypes,\n  ListenersArg,\n  ActionMethod,\n} from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\n\nimport { Eventable } from './Eventable'\nimport isNonNativeEvent from './isNonNativeEvent'\nimport type { ActionDefaults, Defaults, OptionsArg, PerActionDefaults } from './options'\nimport { Options } from './options'\n\ntype IgnoreValue = string | Element | boolean\ntype DeltaSource = 'page' | 'client'\n\n/** */\nexport class Interactable implements Partial<Eventable> {\n  /** @internal */ get _defaults (): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly options!: Required<Options>\n  readonly _actions: Actions\n  readonly target: Target\n  readonly events = new Eventable()\n  readonly _context: Context\n  readonly _win: Window\n  readonly _doc: Document\n  readonly _scopeEvents: Scope['events']\n\n  /** @internal */ _rectChecker?: typeof Interactable.prototype.getRect\n\n  /** */\n  constructor (\n    target: Target,\n    options: any,\n    defaultContext: Document | Element,\n    scopeEvents: Scope['events'],\n  ) {\n    this._actions = options.actions\n    this.target = target\n    this._context = options.context || defaultContext\n    this._win = getWindow(trySelector(target) ? this._context : target)\n    this._doc = this._win.document\n    this._scopeEvents = scopeEvents\n\n    this.set(options)\n  }\n\n  setOnEvents (actionName: ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) {\n      this.on(`${actionName}start`, phases.onstart)\n    }\n    if (is.func(phases.onmove)) {\n      this.on(`${actionName}move`, phases.onmove)\n    }\n    if (is.func(phases.onend)) {\n      this.on(`${actionName}end`, phases.onend)\n    }\n    if (is.func(phases.oninertiastart)) {\n      this.on(`${actionName}inertiastart`, phases.oninertiastart)\n    }\n\n    return this\n  }\n\n  updatePerActionListeners (actionName: ActionName, prev: Listeners, cur: Listeners) {\n    if (is.array(prev) || is.object(prev)) {\n      this.off(actionName, prev)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this.on(actionName, cur)\n    }\n  }\n\n  setPerAction (actionName: ActionName, options: OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array(optionValue)) {\n        ;(actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        ;(actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || ({} as any),\n          clone(optionValue),\n        )\n\n        // set anabled field to true if it exists in the defaults\n        if (\n          is.object(defaults.perAction[optionName]) &&\n          'enabled' in (defaults.perAction[optionName] as any)\n        ) {\n          ;(actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        ;(actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        ;(actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {Rect} The object's bounding rectangle.\n   */\n  getRect (element: Element) {\n    element = element || (is.element(this.target) ? this.target : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker(): (element: Element) => any | null\n  rectChecker(checker: (element: Element) => any): this\n  rectChecker (checker?: (element: Element) => any) {\n    if (is.func(checker)) {\n      this._rectChecker = checker\n\n      this.getRect = (element) => {\n        const rect = extend({}, this._rectChecker(element))\n\n        if (!(('width' in rect) as unknown)) {\n          rect.width = rect.right - rect.left\n          rect.height = rect.bottom - rect.top\n        }\n\n        return rect\n      }\n\n      return this\n    }\n\n    if (checker === null) {\n      delete this.getRect\n      delete this._rectChecker\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  _backCompatOption (optionName: keyof Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      ;(this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        ;(this.options[action as keyof ActionMap] as any)[optionName] = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin (newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource(): DeltaSource\n  deltaSource(newValue: DeltaSource): this\n  deltaSource (newValue?: DeltaSource) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context () {\n    return this._context\n  }\n\n  inContext (element: Document | Node) {\n    return this._context === element.ownerDocument || nodeContains(this._context, element)\n  }\n\n  testIgnoreAllow (\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue, allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Node,\n  ) {\n    return (\n      !this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n      this.testAllow(options.allowFrom, targetNode, eventTarget)\n    )\n  }\n\n  testAllow (this: Interactable, allowFrom: IgnoreValue, targetNode: Node, element: Node) {\n    if (!allowFrom) {\n      return true\n    }\n\n    if (!is.element(element)) {\n      return false\n    }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    } else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  testIgnore (this: Interactable, ignoreFrom: IgnoreValue, targetNode: Node, element: Node) {\n    if (!ignoreFrom || !is.element(element)) {\n      return false\n    }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    } else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire<E extends { type: string }> (iEvent: E) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  _onOff (method: 'on' | 'off', typeArg: EventTypes, listenerArg?: ListenersArg | null, options?: any) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const addRemove = method === 'on' ? 'add' : 'remove'\n    const listeners = normalizeListeners(typeArg, listenerArg)\n\n    for (let type in listeners) {\n      if (type === 'wheel') {\n        type = browser.wheelEvent\n      }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          this._scopeEvents[`${addRemove}Delegate` as 'addDelegate' | 'removeDelegate'](\n            this.target,\n            this._context,\n            type,\n            listener,\n            options,\n          )\n        }\n        // remove listener from this Interactable's element\n        else {\n          this._scopeEvents[addRemove](this.target, type, listener, options)\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on (types: EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff('on', types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off (types: string | string[] | EventTypes, listener?: ListenersArg, options?: any) {\n    return this._onOff('off', types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set (options: OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    ;(this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n      ;(this[methodName] as ActionMethod<unknown>)(options[actionName])\n    }\n\n    for (const setting in options) {\n      if (is.func((this as any)[setting])) {\n        ;(this as any)[setting](options[setting as keyof typeof options])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   */\n  unset () {\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in this._scopeEvents.delegatedEvents) {\n        const delegated = this._scopeEvents.delegatedEvents[type]\n\n        for (let i = delegated.length - 1; i >= 0; i--) {\n          const { selector, context, listeners } = delegated[i]\n\n          if (selector === this.target && context === this._context) {\n            delegated.splice(i, 1)\n          }\n\n          for (let l = listeners.length - 1; l >= 0; l--) {\n            this._scopeEvents.removeDelegate(\n              this.target,\n              this._context,\n              type,\n              listeners[l][0],\n              listeners[l][1],\n            )\n          }\n        }\n      }\n    } else {\n      this._scopeEvents.remove(this.target as Node, 'all')\n    }\n  }\n}\n"
	]
}