{
	"version": 3,
	"sources": [
		"Interaction.ts"
	],
	"names": [
		"arr",
		"extend",
		"hypot",
		"warnOnce",
		"copyAction",
		"pointerUtils",
		"rectUtils",
		"InteractEvent",
		"PointerInfo",
		"_ProxyValues",
		"_ProxyMethods",
		"idCounter",
		"Interaction",
		"pointerMoveTolerance",
		"constructor",
		"pointerType",
		"scopeFire",
		"interactable",
		"element",
		"rect",
		"_rects",
		"edges",
		"_scopeFire",
		"prepared",
		"name",
		"axis",
		"pointers",
		"downEvent",
		"downPointer",
		"_latestPointer",
		"pointer",
		"event",
		"eventTarget",
		"prevEvent",
		"pointerIsDown",
		"pointerWasMoved",
		"_interacting",
		"_ending",
		"_stopped",
		"_proxy",
		"simulation",
		"doMove",
		"signalArg",
		"move",
		"coords",
		"start",
		"newCoords",
		"prev",
		"cur",
		"delta",
		"velocity",
		"_id",
		"that",
		"key",
		"Object",
		"defineProperty",
		"get",
		"value",
		"args",
		"interaction",
		"pointerDown",
		"pointerIndex",
		"updatePointer",
		"pointerInfo",
		"type",
		"action",
		"interacting",
		"length",
		"options",
		"enabled",
		"getRect",
		"left",
		"right",
		"top",
		"bottom",
		"_doPhase",
		"phase",
		"pointerMove",
		"modification",
		"endResult",
		"duplicateMove",
		"page",
		"x",
		"y",
		"client",
		"dx",
		"dy",
		"getPointerIndex",
		"duplicate",
		"setCoordVelocity",
		"copyCoords",
		"setZeroCoords",
		"pointerUp",
		"curEventTarget",
		"test",
		"end",
		"removePointer",
		"documentBlur",
		"endPhaseResult",
		"stop",
		"currentAction",
		"pointerId",
		"getPointerId",
		"findIndex",
		"curPointer",
		"id",
		"getPointerInfo",
		"down",
		"push",
		"setCoords",
		"map",
		"p",
		"_now",
		"setCoordDeltas",
		"downTime",
		"timeStamp",
		"downTarget",
		"pointerExtend",
		"_updateLatestPointer",
		"splice",
		"destroy",
		"_createPreparedEvent",
		"preEnd",
		"_fireEvent",
		"iEvent",
		"fire",
		"addEdges",
		"deltaSource",
		"width",
		"height",
		"beforeResult",
		"Date",
		"now"
	],
	"mappings": "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",
	"sourcesContent": [
		"import type { ActionDefaults } from '@interactjs/core/options'\nimport type {\n  Element,\n  EdgeOptions,\n  PointerEventType,\n  PointerType,\n  FullRect,\n  CoordsSet,\n} from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport extend from '@interactjs/utils/extend'\nimport hypot from '@interactjs/utils/hypot'\nimport { warnOnce, copyAction } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport type { EventPhase } from './InteractEvent'\nimport { InteractEvent } from './InteractEvent'\nimport type { Interactable } from './Interactable'\nimport { PointerInfo } from './PointerInfo'\nimport type { ActionName, Scope } from './scope'\n\nexport interface ActionProps<T extends ActionName | null = never> {\n  name: T\n  axis?: 'x' | 'y' | 'xy' | null\n  edges?: EdgeOptions | null\n}\n\nexport enum _ProxyValues {\n  interactable = '',\n  element = '',\n  prepared = '',\n  pointerIsDown = '',\n  pointerWasMoved = '',\n  _proxy = '',\n}\n\nexport enum _ProxyMethods {\n  start = '',\n  move = '',\n  end = '',\n  stop = '',\n  interacting = '',\n}\n\nexport type PointerArgProps<T extends {} = {}> = {\n  pointer: PointerType\n  event: PointerEventType\n  eventTarget: Node\n  pointerIndex: number\n  pointerInfo: PointerInfo\n  interaction: Interaction<never>\n} & T\n\nexport interface DoPhaseArg<T extends ActionName, P extends EventPhase> {\n  event: PointerEventType\n  phase: EventPhase\n  interaction: Interaction<T>\n  iEvent: InteractEvent<T, P>\n  preEnd?: boolean\n  type?: string\n}\n\nexport type DoAnyPhaseArg = DoPhaseArg<ActionName, EventPhase>\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:new': { interaction: Interaction<ActionName> }\n    'interactions:down': PointerArgProps<{\n      type: 'down'\n    }>\n    'interactions:move': PointerArgProps<{\n      type: 'move'\n      dx: number\n      dy: number\n      duplicate: boolean\n    }>\n    'interactions:up': PointerArgProps<{\n      type: 'up'\n      curEventTarget: EventTarget\n    }>\n    'interactions:cancel': SignalArgs['interactions:up'] & {\n      type: 'cancel'\n      curEventTarget: EventTarget\n    }\n    'interactions:update-pointer': PointerArgProps<{\n      down: boolean\n    }>\n    'interactions:remove-pointer': PointerArgProps\n    'interactions:blur': { interaction: Interaction<never>, event: Event, type: 'blur' }\n    'interactions:before-action-start': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-start': DoAnyPhaseArg\n    'interactions:after-action-start': DoAnyPhaseArg\n    'interactions:before-action-move': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-move': DoAnyPhaseArg\n    'interactions:after-action-move': DoAnyPhaseArg\n    'interactions:before-action-end': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-end': DoAnyPhaseArg\n    'interactions:after-action-end': DoAnyPhaseArg\n    'interactions:stop': { interaction: Interaction }\n  }\n}\n\nexport type InteractionProxy<T extends ActionName | null = never> = Pick<\nInteraction<T>,\nkeyof typeof _ProxyValues | keyof typeof _ProxyMethods\n>\n\nlet idCounter = 0\n\nexport class Interaction<T extends ActionName | null = ActionName> {\n  // current interactable being interacted with\n  interactable: Interactable = null\n\n  // the target element of the interactable\n  element: Element = null\n  rect: FullRect\n  _rects?: {\n    start: FullRect\n    corrected: FullRect\n    previous: FullRect\n    delta: FullRect\n  }\n  edges: EdgeOptions\n\n  _scopeFire: Scope['fire']\n\n  // action that's ready to be fired on next move event\n  prepared: ActionProps<T> = {\n    name: null,\n    axis: null,\n    edges: null,\n  }\n\n  pointerType: string\n\n  // keep track of added pointers\n  pointers: PointerInfo[] = []\n\n  // pointerdown/mousedown/touchstart event\n  downEvent: PointerEventType = null\n\n  downPointer: PointerType = {} as PointerType\n\n  _latestPointer: {\n    pointer: PointerType\n    event: PointerEventType\n    eventTarget: Node\n  } = {\n    pointer: null,\n    event: null,\n    eventTarget: null,\n  }\n\n  // previous action event\n  prevEvent: InteractEvent<T, EventPhase> = null\n\n  pointerIsDown = false\n  pointerWasMoved = false\n  _interacting = false\n  _ending = false\n  _stopped = true\n  _proxy: InteractionProxy<T> = null\n\n  simulation = null\n\n  /** @internal */ get pointerMoveTolerance () {\n    return 1\n  }\n\n  /**\n   * @alias Interaction.prototype.move\n   */\n  doMove = warnOnce(function (this: Interaction, signalArg: any) {\n    this.move(signalArg)\n  }, 'The interaction.doMove() method has been renamed to interaction.move()')\n\n  coords: CoordsSet = {\n    // Starting InteractEvent pointer coordinates\n    start: pointerUtils.newCoords(),\n    // Previous native pointer move event coordinates\n    prev: pointerUtils.newCoords(),\n    // current native pointer move event coordinates\n    cur: pointerUtils.newCoords(),\n    // Change in coordinates and time of the pointer\n    delta: pointerUtils.newCoords(),\n    // pointer velocity\n    velocity: pointerUtils.newCoords(),\n  }\n\n  readonly _id: number = idCounter++\n\n  /** */\n  constructor ({ pointerType, scopeFire }: { pointerType?: string, scopeFire: Scope['fire'] }) {\n    this._scopeFire = scopeFire\n    this.pointerType = pointerType\n\n    const that = this\n\n    this._proxy = {} as InteractionProxy<T>\n\n    for (const key in _ProxyValues) {\n      Object.defineProperty(this._proxy, key, {\n        get () {\n          return that[key]\n        },\n      })\n    }\n\n    for (const key in _ProxyMethods) {\n      Object.defineProperty(this._proxy, key, {\n        value: (...args: any[]) => that[key](...args),\n      })\n    }\n\n    this._scopeFire('interactions:new', { interaction: this })\n  }\n\n  pointerDown (pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    const pointerIndex = this.updatePointer(pointer, event, eventTarget, true)\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:down', {\n      pointer,\n      event,\n      eventTarget,\n      pointerIndex,\n      pointerInfo,\n      type: 'down',\n      interaction: (this as unknown) as Interaction<never>,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable({\n   *     // disable the default drag start by down->move\n   *     manualStart: true\n   *   })\n   *   // start dragging after the user holds the pointer down\n   *   .on('hold', function (event) {\n   *     var interaction = event.interaction\n   *\n   *     if (!interaction.interacting()) {\n   *       interaction.start({ name: 'drag' },\n   *                         event.interactable,\n   *                         event.currentTarget)\n   *     }\n   * })\n   * ```\n   *\n   * Start an action with the given Interactable and Element as tartgets. The\n   * action must be enabled for the target Interactable and an appropriate\n   * number of pointers must be held down - 1 for drag/resize, 2 for gesture.\n   *\n   * Use it with `interactable.<action>able({ manualStart: false })` to always\n   * [start actions manually](https://github.com/taye/interact.js/issues/114)\n   *\n   * @param {object} action   The action to be performed - drag, resize, etc.\n   * @param {Interactable} target  The Interactable to target\n   * @param {Element} element The DOM Element to target\n   * @return {Boolean} Whether the interaction was successfully started\n   */\n  start<A extends ActionName> (action: ActionProps<A>, interactable: Interactable, element: Element): boolean {\n    if (\n      this.interacting() ||\n      !this.pointerIsDown ||\n      this.pointers.length < (action.name === 'gesture' ? 2 : 1) ||\n      !interactable.options[action.name as keyof ActionDefaults].enabled\n    ) {\n      return false\n    }\n\n    copyAction(this.prepared, action)\n\n    this.interactable = interactable\n    this.element = element\n    this.rect = interactable.getRect(element)\n    this.edges = this.prepared.edges\n      ? extend({}, this.prepared.edges)\n      : { left: true, right: true, top: true, bottom: true }\n    this._stopped = false\n    this._interacting =\n      this._doPhase({\n        interaction: this,\n        event: this.downEvent,\n        phase: 'start',\n      }) && !this._stopped\n\n    return this._interacting\n  }\n\n  pointerMove (pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    if (!this.simulation && !(this.modification && this.modification.endResult)) {\n      this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const duplicateMove =\n      this.coords.cur.page.x === this.coords.prev.page.x &&\n      this.coords.cur.page.y === this.coords.prev.page.y &&\n      this.coords.cur.client.x === this.coords.prev.client.x &&\n      this.coords.cur.client.y === this.coords.prev.client.y\n\n    let dx: number\n    let dy: number\n\n    // register movement greater than pointerMoveTolerance\n    if (this.pointerIsDown && !this.pointerWasMoved) {\n      dx = this.coords.cur.client.x - this.coords.start.client.x\n      dy = this.coords.cur.client.y - this.coords.start.client.y\n\n      this.pointerWasMoved = hypot(dx, dy) > this.pointerMoveTolerance\n    }\n\n    const pointerIndex = this.getPointerIndex(pointer)\n    const signalArg = {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      type: 'move' as const,\n      eventTarget,\n      dx,\n      dy,\n      duplicate: duplicateMove,\n      interaction: (this as unknown) as Interaction<never>,\n    }\n\n    if (!duplicateMove) {\n      // set pointer coordinate, time changes and velocity\n      pointerUtils.setCoordVelocity(this.coords.velocity, this.coords.delta)\n    }\n\n    this._scopeFire('interactions:move', signalArg)\n\n    if (!duplicateMove && !this.simulation) {\n      // if interacting, fire an 'action-move' signal etc\n      if (this.interacting()) {\n        signalArg.type = null\n        this.move(signalArg)\n      }\n\n      if (this.pointerWasMoved) {\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n      }\n    }\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('dragmove', function (event) {\n   *     if (someCondition) {\n   *       // change the snap settings\n   *       event.interactable.draggable({ snap: { targets: [] }})\n   *       // fire another move event with re-calculated snap\n   *       event.interaction.move()\n   *     }\n   *   })\n   * ```\n   *\n   * Force a move of the current action at the same coordinates. Useful if\n   * snap/restrict has been changed and you want a movement with the new\n   * settings.\n   */\n  move (signalArg?: any) {\n    if (!signalArg || !signalArg.event) {\n      pointerUtils.setZeroCoords(this.coords.delta)\n    }\n\n    signalArg = extend(\n      {\n        pointer: this._latestPointer.pointer,\n        event: this._latestPointer.event,\n        eventTarget: this._latestPointer.eventTarget,\n        interaction: this,\n      },\n      signalArg || {},\n    )\n\n    signalArg.phase = 'move'\n\n    this._doPhase(signalArg)\n  }\n\n  // End interact move events and stop auto-scroll unless simulation is running\n  pointerUp (pointer: PointerType, event: PointerEventType, eventTarget: Node, curEventTarget: EventTarget) {\n    let pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) {\n      pointerIndex = this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const type = /cancel$/i.test(event.type) ? 'cancel' : 'up'\n\n    this._scopeFire(`interactions:${type}` as 'interactions:up' | 'interactions:cancel', {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      eventTarget,\n      type: type as any,\n      curEventTarget,\n      interaction: (this as unknown) as Interaction<never>,\n    })\n\n    if (!this.simulation) {\n      this.end(event)\n    }\n\n    this.removePointer(pointer, event)\n  }\n\n  documentBlur (event: Event) {\n    this.end(event as any)\n    this._scopeFire('interactions:blur', {\n      event,\n      type: 'blur',\n      interaction: (this as unknown) as Interaction<never>,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('move', function (event) {\n   *     if (event.pageX > 1000) {\n   *       // end the current action\n   *       event.interaction.end()\n   *       // stop all further listeners from being called\n   *       event.stopImmediatePropagation()\n   *     }\n   *   })\n   * ```\n   *\n   * @param {PointerEvent} [event]\n   */\n  end (event?: PointerEventType) {\n    this._ending = true\n    event = event || this._latestPointer.event\n    let endPhaseResult: boolean\n\n    if (this.interacting()) {\n      endPhaseResult = this._doPhase({\n        event,\n        interaction: this,\n        phase: 'end',\n      })\n    }\n\n    this._ending = false\n\n    if (endPhaseResult === true) {\n      this.stop()\n    }\n  }\n\n  currentAction () {\n    return this._interacting ? this.prepared.name : null\n  }\n\n  interacting () {\n    return this._interacting\n  }\n\n  /** */\n  stop () {\n    this._scopeFire('interactions:stop', { interaction: this })\n\n    this.interactable = this.element = null\n\n    this._interacting = false\n    this._stopped = true\n    this.prepared.name = this.prevEvent = null\n  }\n\n  getPointerIndex (pointer: PointerType) {\n    const pointerId = pointerUtils.getPointerId(pointer)\n\n    // mouse and pen interactions may have only one pointer\n    return this.pointerType === 'mouse' || this.pointerType === 'pen'\n      ? this.pointers.length - 1\n      : arr.findIndex(this.pointers, (curPointer) => curPointer.id === pointerId)\n  }\n\n  getPointerInfo (pointer: any) {\n    return this.pointers[this.getPointerIndex(pointer)]\n  }\n\n  updatePointer (pointer: PointerType, event: PointerEventType, eventTarget: Node, down?: boolean) {\n    const id = pointerUtils.getPointerId(pointer)\n    let pointerIndex = this.getPointerIndex(pointer)\n    let pointerInfo = this.pointers[pointerIndex]\n\n    down = down === false ? false : down || /(down|start)$/i.test(event.type)\n\n    if (!pointerInfo) {\n      pointerInfo = new PointerInfo(id, pointer, event, null, null)\n\n      pointerIndex = this.pointers.length\n      this.pointers.push(pointerInfo)\n    } else {\n      pointerInfo.pointer = pointer\n    }\n\n    pointerUtils.setCoords(\n      this.coords.cur,\n      this.pointers.map((p) => p.pointer),\n      this._now(),\n    )\n    pointerUtils.setCoordDeltas(this.coords.delta, this.coords.prev, this.coords.cur)\n\n    if (down) {\n      this.pointerIsDown = true\n\n      pointerInfo.downTime = this.coords.cur.timeStamp\n      pointerInfo.downTarget = eventTarget\n      pointerUtils.pointerExtend(this.downPointer, pointer)\n\n      if (!this.interacting()) {\n        pointerUtils.copyCoords(this.coords.start, this.coords.cur)\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n\n        this.downEvent = event\n        this.pointerWasMoved = false\n      }\n    }\n\n    this._updateLatestPointer(pointer, event, eventTarget)\n\n    this._scopeFire('interactions:update-pointer', {\n      pointer,\n      event,\n      eventTarget,\n      down,\n      pointerInfo,\n      pointerIndex,\n      interaction: (this as unknown) as Interaction<never>,\n    })\n\n    return pointerIndex\n  }\n\n  removePointer (pointer: PointerType, event: PointerEventType) {\n    const pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) return\n\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:remove-pointer', {\n      pointer,\n      event,\n      eventTarget: null,\n      pointerIndex,\n      pointerInfo,\n      interaction: (this as unknown) as Interaction<never>,\n    })\n\n    this.pointers.splice(pointerIndex, 1)\n    this.pointerIsDown = false\n  }\n\n  _updateLatestPointer (pointer: PointerType, event: PointerEventType, eventTarget: Node) {\n    this._latestPointer.pointer = pointer\n    this._latestPointer.event = event\n    this._latestPointer.eventTarget = eventTarget\n  }\n\n  destroy () {\n    this._latestPointer.pointer = null\n    this._latestPointer.event = null\n    this._latestPointer.eventTarget = null\n  }\n\n  _createPreparedEvent<P extends EventPhase> (\n    event: PointerEventType,\n    phase: P,\n    preEnd?: boolean,\n    type?: string,\n  ) {\n    return new InteractEvent<T, P>(this, event, this.prepared.name, phase, this.element, preEnd, type)\n  }\n\n  _fireEvent<P extends EventPhase> (iEvent: InteractEvent<T, P>) {\n    this.interactable.fire(iEvent)\n\n    if (!this.prevEvent || iEvent.timeStamp >= this.prevEvent.timeStamp) {\n      this.prevEvent = iEvent\n    }\n  }\n\n  _doPhase<P extends EventPhase> (\n    signalArg: Omit<DoPhaseArg<T, P>, 'iEvent'> & { iEvent?: InteractEvent<T, P> },\n  ) {\n    const { event, phase, preEnd, type } = signalArg\n    const { rect } = this\n\n    if (rect && phase === 'move') {\n      // update the rect changes due to pointer move\n      rectUtils.addEdges(this.edges, rect, this.coords.delta[this.interactable.options.deltaSource])\n\n      rect.width = rect.right - rect.left\n      rect.height = rect.bottom - rect.top\n    }\n\n    const beforeResult = this._scopeFire(`interactions:before-action-${phase}` as any, signalArg)\n\n    if (beforeResult === false) {\n      return false\n    }\n\n    const iEvent = (signalArg.iEvent = this._createPreparedEvent(event, phase, preEnd, type))\n\n    this._scopeFire(`interactions:action-${phase}` as any, signalArg)\n\n    if (phase === 'start') {\n      this.prevEvent = iEvent\n    }\n\n    this._fireEvent(iEvent)\n\n    this._scopeFire(`interactions:after-action-${phase}` as any, signalArg)\n\n    return true\n  }\n\n  _now () {\n    return Date.now()\n  }\n}\n\nexport default Interaction\nexport { PointerInfo }\n"
	]
}