{
  "version": 3,
  "sources": ["../ste-core/dist/dispatching/DispatcherBase.js", "../ste-core/dist/dispatching/DispatchError.js", "../ste-core/dist/dispatching/DispatcherWrapper.js", "../ste-core/dist/dispatching/EventListBase.js", "../ste-core/dist/management/EventManagement.js", "../ste-core/dist/handling/HandlingBase.js", "../ste-core/dist/dispatching/PromiseDispatcherBase.js", "../ste-core/dist/events/PromiseSubscription.js", "../ste-core/dist/events/Subscription.js", "../ste-core/dist/dispatching/SubscriptionChangeEventHandler.js", "../ste-core/dist/index.js", "../ste-simple-events/dist/SimpleEventDispatcher.js", "../ste-simple-events/dist/SimpleEventList.js", "../ste-simple-events/dist/SimpleEventHandlingBase.js", "../ste-simple-events/dist/NonUniformSimpleEventList.js", "../ste-simple-events/dist/index.js", "dep:ste-simple-events"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispatcherBase = void 0;\r\nconst __1 = require(\"..\");\r\n/**\r\n * Base class for implementation of the dispatcher. It facilitates the subscribe\r\n * and unsubscribe methods based on generic handlers. The TEventType specifies\r\n * the type of event that should be exposed. Use the asEvent to expose the\r\n * dispatcher as event.\r\n *\r\n * @export\r\n * @abstract\r\n * @class DispatcherBase\r\n * @implements {ISubscribable<TEventHandler>}\r\n * @template TEventHandler The type of event handler.\r\n */\r\nclass DispatcherBase {\r\n    constructor() {\r\n        /**\r\n         * The subscriptions.\r\n         *\r\n         * @protected\r\n         *\r\n         * @memberOf DispatcherBase\r\n         */\r\n        this._subscriptions = new Array();\r\n    }\r\n    /**\r\n     * Returns the number of subscriptions.\r\n     *\r\n     * @readonly\r\n     * @type {number}\r\n     * @memberOf DispatcherBase\r\n     */\r\n    get count() {\r\n        return this._subscriptions.length;\r\n    }\r\n    /**\r\n     * Triggered when subscriptions are changed (added or removed).\r\n     *\r\n     * @readonly\r\n     * @type {ISubscribable<SubscriptionChangeEventHandler>}\r\n     * @memberOf DispatcherBase\r\n     */\r\n    get onSubscriptionChange() {\r\n        if (this._onSubscriptionChange == null) {\r\n            this._onSubscriptionChange = new __1.SubscriptionChangeEventDispatcher();\r\n        }\r\n        return this._onSubscriptionChange.asEvent();\r\n    }\r\n    /**\r\n     * Subscribe to the event dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     * @returns A function that unsubscribes the event handler from the event.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    subscribe(fn) {\r\n        if (fn) {\r\n            this._subscriptions.push(this.createSubscription(fn, false));\r\n            this.triggerSubscriptionChange();\r\n        }\r\n        return () => {\r\n            this.unsubscribe(fn);\r\n        };\r\n    }\r\n    /**\r\n     * Subscribe to the event dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     * @returns A function that unsubscribes the event handler from the event.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    sub(fn) {\r\n        return this.subscribe(fn);\r\n    }\r\n    /**\r\n     * Subscribe once to the event with the specified name.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     * @returns A function that unsubscribes the event handler from the event.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    one(fn) {\r\n        if (fn) {\r\n            this._subscriptions.push(this.createSubscription(fn, true));\r\n            this.triggerSubscriptionChange();\r\n        }\r\n        return () => {\r\n            this.unsubscribe(fn);\r\n        };\r\n    }\r\n    /**\r\n     * Checks it the event has a subscription for the specified handler.\r\n     *\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    has(fn) {\r\n        if (!fn)\r\n            return false;\r\n        return this._subscriptions.some((sub) => sub.handler == fn);\r\n    }\r\n    /**\r\n     * Unsubscribes the handler from the dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    unsubscribe(fn) {\r\n        if (!fn)\r\n            return;\r\n        let changes = false;\r\n        for (let i = 0; i < this._subscriptions.length; i++) {\r\n            if (this._subscriptions[i].handler == fn) {\r\n                this._subscriptions.splice(i, 1);\r\n                changes = true;\r\n                break;\r\n            }\r\n        }\r\n        if (changes) {\r\n            this.triggerSubscriptionChange();\r\n        }\r\n    }\r\n    /**\r\n     * Unsubscribes the handler from the dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    unsub(fn) {\r\n        this.unsubscribe(fn);\r\n    }\r\n    /**\r\n     * Generic dispatch will dispatch the handlers with the given arguments.\r\n     *\r\n     * @protected\r\n     * @param {boolean} executeAsync `True` if the even should be executed async.\r\n     * @param {*} scope The scope of the event. The scope becomes the `this` for handler.\r\n     * @param {IArguments} args The arguments for the event.\r\n     * @returns {(IPropagationStatus | null)} The propagation status, or if an `executeAsync` is used `null`.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    _dispatch(executeAsync, scope, args) {\r\n        //execute on a copy because of bug #9\r\n        for (let sub of [...this._subscriptions]) {\r\n            let ev = new __1.EventManagement(() => this.unsub(sub.handler));\r\n            let nargs = Array.prototype.slice.call(args);\r\n            nargs.push(ev);\r\n            let s = sub;\r\n            s.execute(executeAsync, scope, nargs);\r\n            //cleanup subs that are no longer needed\r\n            this.cleanup(sub);\r\n            if (!executeAsync && ev.propagationStopped) {\r\n                return { propagationStopped: true };\r\n            }\r\n        }\r\n        if (executeAsync) {\r\n            return null;\r\n        }\r\n        return { propagationStopped: false };\r\n    }\r\n    /**\r\n     * Creates a subscription.\r\n     *\r\n     * @protected\r\n     * @param {TEventHandler} handler The handler.\r\n     * @param {boolean} isOnce True if the handler should run only one.\r\n     * @returns {ISubscription<TEventHandler>} The subscription.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    createSubscription(handler, isOnce) {\r\n        return new __1.Subscription(handler, isOnce);\r\n    }\r\n    /**\r\n     * Cleans up subs that ran and should run only once.\r\n     *\r\n     * @protected\r\n     * @param {ISubscription<TEventHandler>} sub The subscription.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    cleanup(sub) {\r\n        let changes = false;\r\n        if (sub.isOnce && sub.isExecuted) {\r\n            let i = this._subscriptions.indexOf(sub);\r\n            if (i > -1) {\r\n                this._subscriptions.splice(i, 1);\r\n                changes = true;\r\n            }\r\n        }\r\n        if (changes) {\r\n            this.triggerSubscriptionChange();\r\n        }\r\n    }\r\n    /**\r\n     * Creates an event from the dispatcher. Will return the dispatcher\r\n     * in a wrapper. This will prevent exposure of any dispatcher methods.\r\n     *\r\n     * @returns {ISubscribable<TEventHandler>}\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    asEvent() {\r\n        if (this._wrap == null) {\r\n            this._wrap = new __1.DispatcherWrapper(this);\r\n        }\r\n        return this._wrap;\r\n    }\r\n    /**\r\n     * Clears the subscriptions.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    clear() {\r\n        if (this._subscriptions.length != 0) {\r\n            this._subscriptions.splice(0, this._subscriptions.length);\r\n            this.triggerSubscriptionChange();\r\n        }\r\n    }\r\n    /**\r\n     * Triggers the subscription change event.\r\n     *\r\n     * @private\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    triggerSubscriptionChange() {\r\n        if (this._onSubscriptionChange != null) {\r\n            this._onSubscriptionChange.dispatch(this.count);\r\n        }\r\n    }\r\n}\r\nexports.DispatcherBase = DispatcherBase;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispatchError = void 0;\r\n/**\r\n * Indicates an error with dispatching.\r\n *\r\n * @export\r\n * @class DispatchError\r\n * @extends {Error}\r\n */\r\nclass DispatchError extends Error {\r\n    /**\r\n     * Creates an instance of DispatchError.\r\n     * @param {string} message The message.\r\n     *\r\n     * @memberOf DispatchError\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n    }\r\n}\r\nexports.DispatchError = DispatchError;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispatcherWrapper = void 0;\r\n/**\r\n * Hides the implementation of the event dispatcher. Will expose methods that\r\n * are relevent to the event.\r\n *\r\n * @export\r\n * @class DispatcherWrapper\r\n * @implements {ISubscribable<TEventHandler>}\r\n * @template TEventHandler The type of event handler.\r\n */\r\nclass DispatcherWrapper {\r\n    /**\r\n     * Creates an instance of DispatcherWrapper.\r\n     * @param {ISubscribable<TEventHandler>} dispatcher\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    constructor(dispatcher) {\r\n        this._subscribe = (fn) => dispatcher.subscribe(fn);\r\n        this._unsubscribe = (fn) => dispatcher.unsubscribe(fn);\r\n        this._one = (fn) => dispatcher.one(fn);\r\n        this._has = (fn) => dispatcher.has(fn);\r\n        this._clear = () => dispatcher.clear();\r\n        this._count = () => dispatcher.count;\r\n        this._onSubscriptionChange = () => dispatcher.onSubscriptionChange;\r\n    }\r\n    /**\r\n     * Triggered when subscriptions are changed (added or removed).\r\n     *\r\n     * @readonly\r\n     * @type {ISubscribable<SubscriptionChangeEventHandler>}\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    get onSubscriptionChange() {\r\n        return this._onSubscriptionChange();\r\n    }\r\n    /**\r\n     * Returns the number of subscriptions.\r\n     *\r\n     * @readonly\r\n     * @type {number}\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    get count() {\r\n        return this._count();\r\n    }\r\n    /**\r\n     * Subscribe to the event dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     * @returns {() => void} A function that unsubscribes the event handler from the event.\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    subscribe(fn) {\r\n        return this._subscribe(fn);\r\n    }\r\n    /**\r\n     * Subscribe to the event dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     * @returns {() => void} A function that unsubscribes the event handler from the event.\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    sub(fn) {\r\n        return this.subscribe(fn);\r\n    }\r\n    /**\r\n     * Unsubscribe from the event dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    unsubscribe(fn) {\r\n        this._unsubscribe(fn);\r\n    }\r\n    /**\r\n     * Unsubscribe from the event dispatcher.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    unsub(fn) {\r\n        this.unsubscribe(fn);\r\n    }\r\n    /**\r\n     * Subscribe once to the event with the specified name.\r\n     *\r\n     * @returns {() => void} A function that unsubscribes the event handler from the event.\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    one(fn) {\r\n        return this._one(fn);\r\n    }\r\n    /**\r\n     * Checks it the event has a subscription for the specified handler.\r\n     *\r\n     * @param {TEventHandler} fn The event handler that is called when the event is dispatched.\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    has(fn) {\r\n        return this._has(fn);\r\n    }\r\n    /**\r\n     * Clears all the subscriptions.\r\n     *\r\n     * @memberOf DispatcherWrapper\r\n     */\r\n    clear() {\r\n        this._clear();\r\n    }\r\n}\r\nexports.DispatcherWrapper = DispatcherWrapper;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EventListBase = void 0;\r\n/**\r\n * Base class for event lists classes. Implements the get and remove.\r\n *\r\n * @export\r\n * @abstract\r\n * @class EventListBaset\r\n * @template TEventDispatcher The type of event dispatcher.\r\n */\r\nclass EventListBase {\r\n    constructor() {\r\n        this._events = {};\r\n    }\r\n    /**\r\n     * Gets the dispatcher associated with the name.\r\n     *\r\n     * @param {string} name The name of the event.\r\n     * @returns {TEventDispatcher} The disptacher.\r\n     *\r\n     * @memberOf EventListBase\r\n     */\r\n    get(name) {\r\n        let event = this._events[name];\r\n        if (event) {\r\n            return event;\r\n        }\r\n        event = this.createDispatcher();\r\n        this._events[name] = event;\r\n        return event;\r\n    }\r\n    /**\r\n     * Removes the dispatcher associated with the name.\r\n     *\r\n     * @param {string} name\r\n     *\r\n     * @memberOf EventListBase\r\n     */\r\n    remove(name) {\r\n        delete this._events[name];\r\n    }\r\n}\r\nexports.EventListBase = EventListBase;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EventManagement = void 0;\r\n/**\r\n * Allows the user to interact with the event.\r\n *\r\n * @export\r\n * @class EventManagement\r\n * @implements {IEventManagement}\r\n */\r\nclass EventManagement {\r\n    /**\r\n     * Creates an instance of EventManagement.\r\n     * @param {() => void} unsub An unsubscribe handler.\r\n     *\r\n     * @memberOf EventManagement\r\n     */\r\n    constructor(unsub) {\r\n        this.unsub = unsub;\r\n        this.propagationStopped = false;\r\n    }\r\n    /**\r\n     * Stops the propagation of the event.\r\n     * Cannot be used when async dispatch is done.\r\n     *\r\n     * @memberOf EventManagement\r\n     */\r\n    stopPropagation() {\r\n        this.propagationStopped = true;\r\n    }\r\n}\r\nexports.EventManagement = EventManagement;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HandlingBase = void 0;\r\n/**\r\n * Base class that implements event handling. With a an\r\n * event list this base class will expose events that can be\r\n * subscribed to. This will give your class generic events.\r\n *\r\n * @export\r\n * @abstract\r\n * @class HandlingBase\r\n * @template TEventHandler The type of event handler.\r\n * @template TDispatcher The type of dispatcher.\r\n * @template TList The type of event list.\r\n */\r\nclass HandlingBase {\r\n    /**\r\n     * Creates an instance of HandlingBase.\r\n     * @param {TList} events The event list. Used for event management.\r\n     *\r\n     * @memberOf HandlingBase\r\n     */\r\n    constructor(events) {\r\n        this.events = events;\r\n    }\r\n    /**\r\n     * Subscribes once to the event with the specified name.\r\n     * @param {string} name The name of the event.\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf HandlingBase\r\n     */\r\n    one(name, fn) {\r\n        this.events.get(name).one(fn);\r\n    }\r\n    /**\r\n     * Checks it the event has a subscription for the specified handler.\r\n     * @param {string} name The name of the event.\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf HandlingBase\r\n     */\r\n    has(name, fn) {\r\n        return this.events.get(name).has(fn);\r\n    }\r\n    /**\r\n     * Subscribes to the event with the specified name.\r\n     * @param {string} name The name of the event.\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf HandlingBase\r\n     */\r\n    subscribe(name, fn) {\r\n        this.events.get(name).subscribe(fn);\r\n    }\r\n    /**\r\n     * Subscribes to the event with the specified name.\r\n     * @param {string} name The name of the event.\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf HandlingBase\r\n     */\r\n    sub(name, fn) {\r\n        this.subscribe(name, fn);\r\n    }\r\n    /**\r\n     * Unsubscribes from the event with the specified name.\r\n     * @param {string} name The name of the event.\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf HandlingBase\r\n     */\r\n    unsubscribe(name, fn) {\r\n        this.events.get(name).unsubscribe(fn);\r\n    }\r\n    /**\r\n     * Unsubscribes from the event with the specified name.\r\n     * @param {string} name The name of the event.\r\n     * @param {TEventHandler} fn The event handler.\r\n     *\r\n     * @memberOf HandlingBase\r\n     */\r\n    unsub(name, fn) {\r\n        this.unsubscribe(name, fn);\r\n    }\r\n}\r\nexports.HandlingBase = HandlingBase;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PromiseDispatcherBase = void 0;\r\nconst __1 = require(\"..\");\r\n/**\r\n * Dispatcher base for dispatchers that use promises. Each promise\r\n * is awaited before the next is dispatched, unless the event is\r\n * dispatched with the executeAsync flag.\r\n *\r\n * @export\r\n * @abstract\r\n * @class PromiseDispatcherBase\r\n * @extends {DispatcherBase<TEventHandler>}\r\n * @template TEventHandler The type of event handler.\r\n */\r\nclass PromiseDispatcherBase extends __1.DispatcherBase {\r\n    /**\r\n     * The normal dispatch cannot be used in this class.\r\n     *\r\n     * @protected\r\n     * @param {boolean} executeAsync `True` if the even should be executed async.\r\n     * @param {*} scope The scope of the event. The scope becomes the `this` for handler.\r\n     * @param {IArguments} args The arguments for the event.\r\n     * @returns {(IPropagationStatus | null)} The propagation status, or if an `executeAsync` is used `null`.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    _dispatch(executeAsync, scope, args) {\r\n        throw new __1.DispatchError(\"_dispatch not supported. Use _dispatchAsPromise.\");\r\n    }\r\n    /**\r\n     * Crates a new subscription.\r\n     *\r\n     * @protected\r\n     * @param {TEventHandler} handler The handler.\r\n     * @param {boolean} isOnce Indicates if the handler should only run once.\r\n     * @returns {ISubscription<TEventHandler>} The subscription.\r\n     *\r\n     * @memberOf PromiseDispatcherBase\r\n     */\r\n    createSubscription(handler, isOnce) {\r\n        return new __1.PromiseSubscription(handler, isOnce);\r\n    }\r\n    /**\r\n     * Generic dispatch will dispatch the handlers with the given arguments.\r\n     *\r\n     * @protected\r\n     * @param {boolean} executeAsync `True` if the even should be executed async.\r\n     * @param {*} scope The scope of the event. The scope becomes the `this` for handler.\r\n     * @param {IArguments} args The arguments for the event.\r\n     * @returns {(IPropagationStatus | null)} The propagation status, or if an `executeAsync` is used `null`.\r\n     *\r\n     * @memberOf DispatcherBase\r\n     */\r\n    async _dispatchAsPromise(executeAsync, scope, args) {\r\n        //execute on a copy because of bug #9\r\n        for (let sub of [...this._subscriptions]) {\r\n            let ev = new __1.EventManagement(() => this.unsub(sub.handler));\r\n            let nargs = Array.prototype.slice.call(args);\r\n            nargs.push(ev);\r\n            let ps = sub;\r\n            await ps.execute(executeAsync, scope, nargs);\r\n            //cleanup subs that are no longer needed\r\n            this.cleanup(sub);\r\n            if (!executeAsync && ev.propagationStopped) {\r\n                return { propagationStopped: true };\r\n            }\r\n        }\r\n        if (executeAsync) {\r\n            return null;\r\n        }\r\n        return { propagationStopped: false };\r\n    }\r\n}\r\nexports.PromiseDispatcherBase = PromiseDispatcherBase;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PromiseSubscription = void 0;\r\n/**\r\n * Subscription implementation for events with promises.\r\n *\r\n * @export\r\n * @class PromiseSubscription\r\n * @implements {ISubscription<TEventHandler>}\r\n * @template TEventHandler The type of event handler.\r\n */\r\nclass PromiseSubscription {\r\n    /**\r\n     * Creates an instance of PromiseSubscription.\r\n     * @param {TEventHandler} handler The handler for the subscription.\r\n     * @param {boolean} isOnce Indicates if the handler should only be executed once.\r\n     *\r\n     * @memberOf PromiseSubscription\r\n     */\r\n    constructor(handler, isOnce) {\r\n        this.handler = handler;\r\n        this.isOnce = isOnce;\r\n        /**\r\n         * Indicates if the subscription has been executed before.\r\n         *\r\n         * @memberOf PromiseSubscription\r\n         */\r\n        this.isExecuted = false;\r\n    }\r\n    /**\r\n     * Executes the handler.\r\n     *\r\n     * @param {boolean} executeAsync True if the even should be executed async.\r\n     * @param {*} scope The scope the scope of the event.\r\n     * @param {IArguments} args The arguments for the event.\r\n     *\r\n     * @memberOf PromiseSubscription\r\n     */\r\n    async execute(executeAsync, scope, args) {\r\n        if (!this.isOnce || !this.isExecuted) {\r\n            this.isExecuted = true;\r\n            //TODO: do we need to cast to any -- seems yuck\r\n            var fn = this.handler;\r\n            if (executeAsync) {\r\n                setTimeout(() => {\r\n                    fn.apply(scope, args);\r\n                }, 1);\r\n                return;\r\n            }\r\n            let result = fn.apply(scope, args);\r\n            await result;\r\n        }\r\n    }\r\n}\r\nexports.PromiseSubscription = PromiseSubscription;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Subscription = void 0;\r\n/**\r\n * Stores a handler. Manages execution meta data.\r\n * @class Subscription\r\n * @template TEventHandler\r\n */\r\nclass Subscription {\r\n    /**\r\n     * Creates an instance of Subscription.\r\n     *\r\n     * @param {TEventHandler} handler The handler for the subscription.\r\n     * @param {boolean} isOnce Indicates if the handler should only be executed once.\r\n     */\r\n    constructor(handler, isOnce) {\r\n        this.handler = handler;\r\n        this.isOnce = isOnce;\r\n        /**\r\n         * Indicates if the subscription has been executed before.\r\n         */\r\n        this.isExecuted = false;\r\n    }\r\n    /**\r\n     * Executes the handler.\r\n     *\r\n     * @param {boolean} executeAsync True if the even should be executed async.\r\n     * @param {*} scope The scope the scope of the event.\r\n     * @param {IArguments} args The arguments for the event.\r\n     */\r\n    execute(executeAsync, scope, args) {\r\n        if (!this.isOnce || !this.isExecuted) {\r\n            this.isExecuted = true;\r\n            var fn = this.handler;\r\n            if (executeAsync) {\r\n                setTimeout(() => {\r\n                    fn.apply(scope, args);\r\n                }, 1);\r\n            }\r\n            else {\r\n                fn.apply(scope, args);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.Subscription = Subscription;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SubscriptionChangeEventDispatcher = void 0;\r\nconst __1 = require(\"..\");\r\n/**\r\n * Dispatcher for subscription changes.\r\n *\r\n * @export\r\n * @class SubscriptionChangeEventDispatcher\r\n * @extends {DispatcherBase<SubscriptionChangeEventHandler>}\r\n */\r\nclass SubscriptionChangeEventDispatcher extends __1.DispatcherBase {\r\n    /**\r\n     * Dispatches the event.\r\n     *\r\n     * @param {number} count The currrent number of subscriptions.\r\n     *\r\n     * @memberOf SubscriptionChangeEventDispatcher\r\n     */\r\n    dispatch(count) {\r\n        this._dispatch(false, this, arguments);\r\n    }\r\n}\r\nexports.SubscriptionChangeEventDispatcher = SubscriptionChangeEventDispatcher;\r\n", "\"use strict\";\r\n/*!\r\n * Strongly Typed Events for TypeScript - Core\r\n * https://github.com/KeesCBakker/StronlyTypedEvents/\r\n * http://keestalkstech.com\r\n *\r\n * Copyright Kees C. Bakker / KeesTalksTech\r\n * Released under the MIT license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SubscriptionChangeEventDispatcher = exports.HandlingBase = exports.PromiseDispatcherBase = exports.PromiseSubscription = exports.DispatchError = exports.EventManagement = exports.EventListBase = exports.DispatcherWrapper = exports.DispatcherBase = exports.Subscription = void 0;\r\nconst DispatcherBase_1 = require(\"./dispatching/DispatcherBase\");\r\nObject.defineProperty(exports, \"DispatcherBase\", { enumerable: true, get: function () { return DispatcherBase_1.DispatcherBase; } });\r\nconst DispatchError_1 = require(\"./dispatching/DispatchError\");\r\nObject.defineProperty(exports, \"DispatchError\", { enumerable: true, get: function () { return DispatchError_1.DispatchError; } });\r\nconst DispatcherWrapper_1 = require(\"./dispatching/DispatcherWrapper\");\r\nObject.defineProperty(exports, \"DispatcherWrapper\", { enumerable: true, get: function () { return DispatcherWrapper_1.DispatcherWrapper; } });\r\nconst EventListBase_1 = require(\"./dispatching/EventListBase\");\r\nObject.defineProperty(exports, \"EventListBase\", { enumerable: true, get: function () { return EventListBase_1.EventListBase; } });\r\nconst EventManagement_1 = require(\"./management/EventManagement\");\r\nObject.defineProperty(exports, \"EventManagement\", { enumerable: true, get: function () { return EventManagement_1.EventManagement; } });\r\nconst HandlingBase_1 = require(\"./handling/HandlingBase\");\r\nObject.defineProperty(exports, \"HandlingBase\", { enumerable: true, get: function () { return HandlingBase_1.HandlingBase; } });\r\nconst PromiseDispatcherBase_1 = require(\"./dispatching/PromiseDispatcherBase\");\r\nObject.defineProperty(exports, \"PromiseDispatcherBase\", { enumerable: true, get: function () { return PromiseDispatcherBase_1.PromiseDispatcherBase; } });\r\nconst PromiseSubscription_1 = require(\"./events/PromiseSubscription\");\r\nObject.defineProperty(exports, \"PromiseSubscription\", { enumerable: true, get: function () { return PromiseSubscription_1.PromiseSubscription; } });\r\nconst Subscription_1 = require(\"./events/Subscription\");\r\nObject.defineProperty(exports, \"Subscription\", { enumerable: true, get: function () { return Subscription_1.Subscription; } });\r\nconst SubscriptionChangeEventHandler_1 = require(\"./dispatching/SubscriptionChangeEventHandler\");\r\nObject.defineProperty(exports, \"SubscriptionChangeEventDispatcher\", { enumerable: true, get: function () { return SubscriptionChangeEventHandler_1.SubscriptionChangeEventDispatcher; } });\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SimpleEventDispatcher = void 0;\r\nconst ste_core_1 = require(\"ste-core\");\r\n/**\r\n * The dispatcher handles the storage of subsciptions and facilitates\r\n * subscription, unsubscription and dispatching of a simple event\r\n *\r\n * @export\r\n * @class SimpleEventDispatcher\r\n * @extends {DispatcherBase<ISimpleEventHandler<TArgs>>}\r\n * @implements {ISimpleEvent<TArgs>}\r\n * @template TArgs\r\n */\r\nclass SimpleEventDispatcher extends ste_core_1.DispatcherBase {\r\n    /**\r\n     * Creates an instance of SimpleEventDispatcher.\r\n     *\r\n     * @memberOf SimpleEventDispatcher\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Dispatches the event.\r\n     *\r\n     * @param {TArgs} args The arguments object.\r\n     * @returns {IPropagationStatus} The status of the event.\r\n     *\r\n     * @memberOf SimpleEventDispatcher\r\n     */\r\n    dispatch(args) {\r\n        const result = this._dispatch(false, this, arguments);\r\n        if (result == null) {\r\n            throw new ste_core_1.DispatchError(\"Got `null` back from dispatch.\");\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Dispatches the event without waiting for the result.\r\n     *\r\n     * @param {TArgs} args The arguments object.\r\n     *\r\n     * @memberOf SimpleEventDispatcher\r\n     */\r\n    dispatchAsync(args) {\r\n        this._dispatch(true, this, arguments);\r\n    }\r\n    /**\r\n     * Creates an event from the dispatcher. Will return the dispatcher\r\n     * in a wrapper. This will prevent exposure of any dispatcher methods.\r\n     *\r\n     * @returns {ISimpleEvent<TArgs>} The event.\r\n     *\r\n     * @memberOf SimpleEventDispatcher\r\n     */\r\n    asEvent() {\r\n        return super.asEvent();\r\n    }\r\n}\r\nexports.SimpleEventDispatcher = SimpleEventDispatcher;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SimpleEventList = void 0;\r\nconst ste_core_1 = require(\"ste-core\");\r\nconst SimpleEventDispatcher_1 = require(\"./SimpleEventDispatcher\");\r\n/**\r\n * Storage class for multiple simple events that are accessible by name.\r\n * Events dispatchers are automatically created.\r\n */\r\nclass SimpleEventList extends ste_core_1.EventListBase {\r\n    /**\r\n     * Creates a new SimpleEventList instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Creates a new dispatcher instance.\r\n     */\r\n    createDispatcher() {\r\n        return new SimpleEventDispatcher_1.SimpleEventDispatcher();\r\n    }\r\n}\r\nexports.SimpleEventList = SimpleEventList;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SimpleEventHandlingBase = void 0;\r\nconst ste_core_1 = require(\"ste-core\");\r\nconst SimpleEventList_1 = require(\"./SimpleEventList\");\r\n/**\r\n * Extends objects with signal event handling capabilities.\r\n */\r\nclass SimpleEventHandlingBase extends ste_core_1.HandlingBase {\r\n    constructor() {\r\n        super(new SimpleEventList_1.SimpleEventList());\r\n    }\r\n}\r\nexports.SimpleEventHandlingBase = SimpleEventHandlingBase;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NonUniformSimpleEventList = void 0;\r\nconst SimpleEventDispatcher_1 = require(\"./SimpleEventDispatcher\");\r\n/**\r\n * Similar to EventList, but instead of TArgs, a map of event names ang argument types is provided with TArgsMap.\r\n */\r\nclass NonUniformSimpleEventList {\r\n    constructor() {\r\n        this._events = {};\r\n    }\r\n    /**\r\n     * Gets the dispatcher associated with the name.\r\n     * @param name The name of the event.\r\n     */\r\n    get(name) {\r\n        if (this._events[name]) {\r\n            // @TODO avoid typecasting. Not sure why TS thinks this._events[name] could still be undefined.\r\n            return this._events[name];\r\n        }\r\n        const event = this.createDispatcher();\r\n        this._events[name] = event;\r\n        return event;\r\n    }\r\n    /**\r\n     * Removes the dispatcher associated with the name.\r\n     * @param name The name of the event.\r\n     */\r\n    remove(name) {\r\n        delete this._events[name];\r\n    }\r\n    /**\r\n     * Creates a new dispatcher instance.\r\n     */\r\n    createDispatcher() {\r\n        return new SimpleEventDispatcher_1.SimpleEventDispatcher();\r\n    }\r\n}\r\nexports.NonUniformSimpleEventList = NonUniformSimpleEventList;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NonUniformSimpleEventList = exports.SimpleEventList = exports.SimpleEventHandlingBase = exports.SimpleEventDispatcher = void 0;\r\nconst SimpleEventDispatcher_1 = require(\"./SimpleEventDispatcher\");\r\nObject.defineProperty(exports, \"SimpleEventDispatcher\", { enumerable: true, get: function () { return SimpleEventDispatcher_1.SimpleEventDispatcher; } });\r\nconst SimpleEventHandlingBase_1 = require(\"./SimpleEventHandlingBase\");\r\nObject.defineProperty(exports, \"SimpleEventHandlingBase\", { enumerable: true, get: function () { return SimpleEventHandlingBase_1.SimpleEventHandlingBase; } });\r\nconst NonUniformSimpleEventList_1 = require(\"./NonUniformSimpleEventList\");\r\nObject.defineProperty(exports, \"NonUniformSimpleEventList\", { enumerable: true, get: function () { return NonUniformSimpleEventList_1.NonUniformSimpleEventList; } });\r\nconst SimpleEventList_1 = require(\"./SimpleEventList\");\r\nObject.defineProperty(exports, \"SimpleEventList\", { enumerable: true, get: function () { return SimpleEventList_1.SimpleEventList; } });\r\n", "export default require(\"./node_modules/ste-simple-events/dist/index.js\");"],
  "mappings": "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",
  "names": []
}
